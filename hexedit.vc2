*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="hexedit.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS refusefocus AS textbox 		&& If user attempts to give column focus, focus is moved to adjacent column.
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	ForeColor = 255,255,255
	Height = 23
	Name = "refusefocus"
	Width = 100
	
	PROCEDURE GotFocus
		** This object never allows focus.  Must decide where to set focus, then set it.
		** If focus is coming from the last hex column, move focus to the first column
		** of the next row, for convenience when editing.
		
		nColNum = THISFORMSET.nColNum	&& THISFORMSET.nColNum is set in the grid's BeforeRowColChange event.
		
		WITH THIS.PARENT.PARENT		&& The grid.
		DO CASE
		CASE .ActiveColumn = 1
			IF nColNum = 2	&& Focus came from the first hex column
				* Must make sure no keystrokes are accepted between the
				* SETFOCUS and the SKIP commands below.
				THISFORM.LOCKSCREEN = .T.
				.Column17.SETFOCUS
				* IF we were here, we're moving backward.
				IF RECNO("HEXEDIT") > 1
					SKIP -1
				ENDIF
				.REFRESH	&& Necessary, or keystrokes can go in wrong cell.
				THISFORM.LOCKSCREEN = .F.
			ELSE
				&& Clicked from somewhere else, or got focus by prg.
				.Column2.SETFOCUS
			ENDIF
		CASE .ActiveColumn = 18
				IF nColNum = 17	&& Focus came from last Hex column, we must be moving forward
					IF RECNO("HEXEDIT") < RECCOUNT("HEXEDIT")
						* Must make sure no keystrokes are accepted between the
						* SETFOCUS and the SKIP commands below.
						THISFORM.LOCKSCREEN = .T.
						.Column2.SETFOCUS
						SKIP IN HEXEDIT
						.REFRESH
						THISFORM.LOCKSCREEN = .F.
					ELSE
						.Column17.SETFOCUS
					ENDIF
				ELSE
					.Column17.SETFOCUS
				ENDIF
		OTHERWISE
				*  Haven't entered a hex column yet.
				.Column2.SETFOCUS
		ENDCASE
		
		ENDWITH
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS text1 AS textbox 		&& Text1 object for Hex editing portion of grid.
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: hexisvalid
	*</DefinedPropArrayMethod>

	BorderStyle = 0
	FontBold = .F.
	FontName = "Courier"
	FontSize = 9
	Format = "!!"
	Height = 25
	hexisvalid = .T.
	InputMask = ""
	Margin = 0
	Name = "text1"
	SpecialEffect = 1
	Width = 28
	
	PROCEDURE GotFocus
		*  Make textbox backcolor match the dynamic backcolor (if part of "found" string) of
		*  its cell in the grid.
		WITH THIS
		IF LEN(.PARENT.DynamicBackColor) > 0
			.Backcolor = EVALUATE(.PARENT.DynamicBackcolor)
			*  If file is opened read-only, all the textboxes are disabled.
			*  So must set the DisabledBackcolor also.
			.DisabledBackcolor = EVALUATE(.PARENT.DynamicBackcolor)
			.Refresh
		ELSE
			*  Set back to correct color.
			.ResetToDefault("BackColor")
		ENDIF
		ENDWITH
		
	ENDPROC

	PROCEDURE InteractiveChange
		*  If we've entered this event, the KeyPress event has already decided
		*  that it is a valid keystroke (0-9 or A-F)
		THISFORM.Lockscreen = .T.
		
		WITH THIS.PARENT
		IF .READONLY = .F.	&& If editing is enabled.
			IF THISFORMSET.lSectorDirty = .F.			&& If flag not already set
				THISFORMSET.lSectorDirty = .T.			&& Set flag that this sector has been modified.
				THISFORM.cmdSaveEdits.ENABLED = .T.		&& Enable save/undo buttons.
				THISFORM.cmdRevertEdits.Enabled = .T.
			ENDIF
		ENDIF
		
		nAsciiCode = THISFORMSET.Hex2Dec(THIS.VALUE)
		
		** Update the Text column.
		cTempText = HEXEDIT.Text		&& Get current string from table.
		nColNum = .PARENT.ActiveColumn
		cTempText = LEFT(cTempText, nColNum - 2) + CHR(nAsciiCode) + IIF(nColNum < 17, SUBST(cTempText, nColNum), "")
		REPLACE HEXEDIT.Text WITH cTempText
		.PARENT.COLUMN18.REFRESH		&& Only refresh the Text column.
		ENDWITH
		
		THISFORM.LockScreen = .F.
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		**  Must be numeric or in "ABCDEF" or arrow keys or bkspace.
		DO CASE
			* Put valid keystrokes first
			CASE BETWEEN(nKeyCode, 48, 57) OR BETWEEN(nKeyCode, 97, 102) OR BETWEEN(nKeyCode, 65, 70)
				RETURN	&& Valid character keystroke.  Exit immediately.
			CASE nShiftAltCtrl >= 4 	&& if alt held down.
				RETURN	&& no special handling
			CASE nKeyCode = 31	&& Ctrl + PgUp
				THISFORM.cmdPreviousSector.SetFocus	&& Need to get focus out of grid.
				THISFORM.cmdPreviousSector.CLICK
				THIS.SetFocus()
			CASE nKeyCode = 30	&& Ctrl + PgDn
				THISFORM.cmdNextSector.SetFocus	&& Need to get focus out of grid.
				THISFORM.cmdNextSector.CLICK
				THIS.SetFocus()
			CASE nKeyCode = 29	&& Ctrl + Home
				THISFORM.cmdTopOfFile.SetFocus	&& Need to get focus out of grid.
				THISFORM.cmdTopOfFile.CLICK
				THIS.SetFocus()
			CASE nKeyCode = 23	&& Ctrl + End
				THISFORM.cmdBottomOfFile.SetFocus	&& Need to get focus out of grid.
				THISFORM.cmdBottomOfFile.CLICK
				THIS.SetFocus()
			CASE nKeycode = -2	&&nKeyCode = 145 AND nShiftAltCtrl = 2	&& Ctrl+DnArrow
				IF THISFORMSET.HexEditor.cmdFindNext.Enabled
					THISFORMSET.HexEditor.cmdFindNext.SetFocus
					THISFORMSET.HexEditor.cmdFindNext.Click
				ENDIF
			CASE nKeyCode = 86	&&nKeyCode = 141 AND nShiftAltCtrl = 2	&& Ctrl+UpArrow
				IF THISFORMSET.HexEditor.cmdFindPrevious.Enabled
					THISFORMSET.HexEditor.cmdFindPrevious.SetFocus
					THISFORMSET.HexEditor.cmdFindPrevious.Click
				ENDIF
		
			CASE nKeyCode = 7 OR nKeyCode = 127
				** Do nothing.  Will hit the NODEFAULT after the DO CASE structure.
			CASE BETWEEN(nKeyCode, 0, 25) OR BETWEEN(nKeyCode ,25,31);
				OR (nKeyCode = 148) OR (nKeyCode = 165)	&& All valid keystrokes not already dealt with.
				RETURN
			OTHERWISE
				?? CHR(7)		
		ENDCASE
		
		** If we are here, the keystroke needed special handling, and should not be passed on to the textbox.
		NODEFAULT
	ENDPROC

ENDDEFINE

DEFINE CLASS txtfindstring AS textbox 		&& Textbox object for Decimal grid in FindStr form.
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	BorderStyle = 0
	Height = 21
	InputMask = "X"
	Margin = 0
	Name = "txtfindstring"
	SpecialEffect = 1
	Width = 100
	
	PROCEDURE GotFocus
		** To make grid act more like textbox, make focus move to cell just after last
		** non-blank cell if user clicks to the right of non-blank cells
		nPreviousColumn = THIS.PARENT.PARENT.ActiveColumn - 1
		IF nPreviousColumn > 0 AND ISBLANK(ALLTRIM(THISFORM.grdHex.COLUMNS(nPreviousColumn).Text1.VALUE))
			THISFORM.LOCKSCREEN = .T.
			FOR nCurrentCol = nPreviousColumn to 1 STEP -1
				IF !ISBLANK(ALLTRIM(THISFORM.grdHex.COLUMNS(nCurrentCol).Text1.VALUE))
					EXIT
				ENDIF
			NEXT
			IF nCurrentCol != nPreviousColumn		&& Did we have to move?
				THIS.PARENT.PARENT.COLUMNS(nCurrentCol + 1).SETFOCUS
				THISFORM.grdChar.REFRESH
			ENDIF
		
			THISFORM.LOCKSCREEN = .F.
		ENDIF
	ENDPROC

	PROCEDURE InteractiveChange
		** Current cell has been edited.  Translate, and update the Hex grid.
		
		nCurrentCol = THIS.PARENT.PARENT.ActiveColumn
		cTempText = THISFORMSET.DEC2HEX(ASC(THIS.VALUE))
		REPLACE (FIELD(nCurrentCol, "FindStrH")) WITH cTempText IN "FindStrH"
		
		WITH THISFORM
			*  Update the Hex grid.
			.grdHex.Columns(nCurrentCol).Text1.Value = cTempText
			.grdHex.Columns(nCurrentCol).REFRESH
			
			*  If there is something to search for, enable the Find button.
			IF !ISNULL(EVAL("FindStrH." + FIELD(1,"FindStrH"))) ;
				AND !ISBLANK(EVAL("FindStrH." + FIELD(1, "FindStrH")))
				.cmdFind.Enabled = .T.
			ELSE
				.cmdFind.Enabled = .F.
			ENDIF
		ENDWITH
		
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		** Handle certain keystrokes, to make grid act more like a textbox.
		DO CASE
		CASE BETWEEN(nKeyCode, 16, 126) OR BETWEEN(nKeyCode,129,255)
			RETURN	&& Return immediately if typical keystroke.
		CASE nKeyCode = 1	&& Home
			NODEFAULT
			THIS.PARENT.PARENT.Columns(1).SETFOCUS
		CASE nKeyCode = 6	&& End
			NODEFAULT
			THIS.PARENT.PARENT.Columns(15).SETFOCUS
		CASE nKeyCode = 13	&& Return
			NODEFAULT
			THISFORM.cmdFind.Click
		CASE nKeyCode = 127	OR nKeyCode = 7	&& Backspace
			NODEFAULT
			nActiveColumn = THIS.PARENT.PARENT.ActiveColumn
			IF nActiveColumn < 15
				IF !ISBLANK(THISFORM.grdHex.Columns(nActiveColumn + 1).Text1.Value)
					** Cell to right isn't blank.  Just move pointer.
					IF nActiveColumn > 1 AND nKeyCode = 127
						THIS.PARENT.PARENT.Columns(nActiveColumn - 1).SETFOCUS
					ENDIF
					RETURN
				ENDIF
			ENDIF
			** If we made it here, we can delete and move freely.
			THIS.VALUE = ""			&& since we issue NODEFAULT, the value is not stored as we lose focus.
			cFieldName = "FindStr.C" + ALLTRIM(STR(nActiveColumn,2,0))
			REPLACE (cFieldName) WITH ""		&& Do it manually.
			THISFORM.grdHex.Columns(nActiveColumn).Text1.Value = ""
			cFieldName = "FindStrH.C" + ALLTRIM(STR(nActiveColumn,2,0))
			REPLACE (cFieldName) WITH ""
			IF nActiveColumn > 1 AND nKeyCode = 127
				THIS.PARENT.PARENT.Columns(nActiveColumn - 1).SETFOCUS
			ELSE
				*  If there is nothing to search for, disable the Find button.
				IF !ISNULL(EVAL("FindStrH." + FIELD(1,"FindStrH"))) ;
					AND !ISBLANK(EVAL("FindStrH." + FIELD(1, "FindStrH")))
					THISFORM.cmdFind.Enabled = .T.
				ELSE
					THISFORM.cmdFind.Enabled = .F.
				ENDIF
			ENDIF
			THISFORM.REFRESH
		CASE nKeyCode = 9 		&& Tab
			** Default for the grid is to move to next field in grid.  Needs to move focus to
			** next control.
			NODEFAULT
			THISFORM.Lockscreen = .T.
			THISFORM.grdHex.Columns(This.parent.parent.ActiveColumn).SETFOCUS
			THISFORM.Lockscreen = .F.
		CASE nKeyCode = 15		&& ShiftTab.
			NODEFAULT
			THISFORM.cmdCancel.SETFOCUS
		ENDCASE
		
	ENDPROC

ENDDEFINE

DEFINE CLASS txtfindstringhex AS textbox 		&& Textbox object for Hex grid in FindStr form.
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	BorderStyle = 0
	FontName = "Courier"
	FontSize = 8
	Format = ""
	Height = 21
	InputMask = "XX"
	Margin = 0
	Name = "txtfindstringhex"
	SpecialEffect = 1
	Width = 100
	
	PROCEDURE GotFocus
		** To make grid act more like textbox, make focus move to cell just after last
		** non-blank cell if user clicks to the right of non-blank cells
		WITH THIS.PARENT.PARENT
		nPreviousColumn = .ActiveColumn - 1
		IF nPreviousColumn > 0 AND ISBLANK(ALLTRIM(.COLUMNS(nPreviousColumn).Text1.VALUE))
			THISFORM.LOCKSCREEN = .T.
			FOR nCurrentCol = nPreviousColumn to 1 STEP -1
				IF !ISBLANK(ALLTRIM(.COLUMNS(nCurrentCol).Text1.VALUE))
					EXIT
				ENDIF
			NEXT
			IF nCurrentCol != nPreviouscolumn		&& Did we have to move?
				.COLUMNS(nCurrentCol + 1).SETFOCUS
				.REFRESH
			ENDIF
			THISFORM.LOCKSCREEN = .F.
		ENDIF
		ENDWITH
		
	ENDPROC

	PROCEDURE InteractiveChange
		** This cell has been edited.  Translate and update Character grid.
		nCurrentCol = THIS.PARENT.PARENT.ActiveColumn
		cTempText = THIS.VALUE
		
		IF ISBLANK(cTempText) OR ISNULL(cTempText)
			REPLACE (FIELD(nCurrentCol, "FindStr")) WITH "" IN "FindStr"
		ELSE
			REPLACE (FIELD(nCurrentCol, "FindStr")) WITH CHR(THISFORMSET.HEX2DEC(cTempText)) IN "FindStr"
		ENDIF
		*THISFORM.grdChar.Columns(nCurrentCol).REFRESH
		WITH THISFORM
			*  Update the Hex grid.
		*	.grdHex.Columns(nCurrentCol).Text1.Value = cTempText
			.grdChar.Columns(nCurrentCol).REFRESH
			
			*  If there is something to search for, enable the Find button.
			IF !ISNULL(EVAL("FindStrH." + FIELD(1,"FindStrH"))) ;
				AND !ISBLANK(EVAL("FindStrH." + FIELD(1, "FindStrH")))
				.cmdFind.Enabled = .T.
			ELSE
				.cmdFind.Enabled = .F.
			ENDIF
		ENDWITH
		
		
		
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		*  Bypass the grid cell's default keystrokes.
		
		*Must be numeric or in "ABCDEF"
		DO CASE
		CASE BETWEEN(nKeyCode, 31, 126) OR BETWEEN(nKeyCode,129,255)	&& Printable letters
			IF !(CHR(nKeyCode)$"1234567890abcdefABCDEF")		&& Only allow Hex digits
				?? CHR(7)		
				NODEFAULT
			ENDIF
			RETURN
		CASE nKeyCode = 1	&& Home
			NODEFAULT
			THIS.PARENT.PARENT.Columns(1).SETFOCUS
		CASE nKeyCode = 6	&& End
			NODEFAULT
			THIS.PARENT.PARENT.Columns(15).SETFOCUS
		CASE nKeyCode = 13	&& Return
			NODEFAULT
			THISFORM.cmdFind.Click
		CASE nKeyCode = 127	OR nKeyCode = 7&& Backspace
			NODEFAULT
			nActiveColumn = THIS.PARENT.PARENT.ActiveColumn
			IF nActiveColumn < 15
				IF !ISBLANK(THIS.PARENT.PARENT.Columns(nActiveColumn + 1).Text1.Value)
					** Cell to right isn't blank.  Just move pointer.
					IF nActiveColumn > 1 AND nKeyCode = 127
						THIS.PARENT.PARENT.Columns(nActiveColumn - 1).SETFOCUS
					ENDIF
					RETURN
				ENDIF
			ENDIF
			** If we made it here, we can delete and move freely.
			THIS.VALUE = ""			&& since we issue NODEFAULT, the value is not stored as we lose focus.
			cFieldName = "FindStr.C" + ALLTRIM(STR(nActiveColumn,2,0))
			REPLACE (cFieldName) WITH ""		&& Do it manually.
			THISFORM.grdHex.Columns(nActiveColumn).Text1.Value = ""
			cFieldName = "FindStrH.C" + ALLTRIM(STR(nActiveColumn,2,0))
			REPLACE (cFieldName) WITH ""
			IF nActiveColumn > 1 AND nKeyCode = 127
				THIS.PARENT.PARENT.Columns(nActiveColumn - 1).SETFOCUS
			ELSE
				*  If there is nothing to search for, disable the Find button.
				IF !ISNULL(EVAL("FindStrH." + FIELD(1,"FindStrH"))) ;
					AND !ISBLANK(EVAL("FindStrH." + FIELD(1, "FindStrH")))
					THISFORM.cmdFind.Enabled = .T.
				ELSE
					THISFORM.cmdFind.Enabled = .F.
				ENDIF
			ENDIF
			THISFORM.REFRESH
		CASE nKeyCode = 9 		&& Tab
			** Default for the grid is to move to next field in grid.  Needs to move focus to
			** next control.
			NODEFAULT
			THISFORM.optSearchDirection.OPTION1.SETFOCUS
		CASE nKeyCode = 15		&& ShiftTab.
			NODEFAULT
			THISFORM.Lockscreen = .T.
			THISFORM.grdChar.Columns(This.parent.parent.ActiveColumn).SETFOCUS
			THISFORM.Lockscreen = .F.
		ENDCASE
		
	ENDPROC

ENDDEFINE
