*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="hexedit.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 364
	Left = 159
	Name = "Dataenvironment"
	Top = 237
	Width = 749

ENDDEFINE

DEFINE CLASS hexedit AS formset 
 	*< CLASSDATA: Baseclass="formset" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="frmHexEditor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.cmdFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.cmdTopOfFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.cmdBottomOfFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.lblCurrentFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.cmdGoToAddress" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.cmdPreviousSector" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.cmdNextSector" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.lblDecFileSize" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column1.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column2.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column3.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column4.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column5.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column6.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column7.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column8.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column9.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column10.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column10.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column11.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column11.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column12.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column12.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column13.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column13.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column14.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column14.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column15.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column15.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column16.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column16.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column17.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column17.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column18.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.grdData.Column18.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.cmdRevertEdits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.cmdFind" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.cmdFindPrevious" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.cmdFindNext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.cmdSaveEdits" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmHexEditor.cmdClose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.cmdFind" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column1.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column2.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column3.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column4.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column5.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column6.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column7.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column8.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column9.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column10.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column10.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column11.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column11.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column12.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column12.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column13.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column13.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column14.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column14.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column15.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdChar.Column15.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column1.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column2.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column3.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column4.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column5.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column6.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column7.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column8.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column9.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column10.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column10.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column11.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column11.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column12.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column12.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column13.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column13.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column14.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column14.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column15.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.grdHex.Column15.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.optSearchDirection" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.chkCaseSen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.optSearchFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmFindStr.Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmGotoSect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmGotoSect.txtDecimalAddress" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmGotoSect.txtHexAddress" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmGotoSect.cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmGotoSect.cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmGotoSect.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="frmGotoSect.Label2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: checkkeystroke
		*m: cleargridhighlights
		*m: dec2hex
		*m: fillhexarray
		*m: filltable
		*m: findstring
		*m: hex2dec
		*m: readsector
		*m: reportfileerror
		*m: setgridhighlights
		*m: writesector
		*p: cdecimaladdress		&& Address to jump to, in base ten.
		*p: cfindstrhname		&& Name of file used for hex search string
		*p: cfindstrname		&& Name of file used for character representation of search string
		*p: chexaddress		&& Address to jump to, in Hex notation.
		*p: chexarrayname
		*p: chighlightarrayname
		*p: coldbell
		*p: coldcompat
		*p: coldonesca
		*p: coldsetesca
		*p: csearchstring
		*p: ctemptable
		*p: findstr
		*p: gotosect
		*p: hexeditor
		*p: lcasesen
		*p: lformsetlostfocus
		*p: lgridwasscrolled
		*p: liceventfired		&& Used in txtFindStringHex, to specify whether the last keystroke made any modifications to the data.
		*p: loldinsmode
		*p: lsectordirty
		*p: lstringhighlighted
		*p: ncolnum
		*p: ndesiredlocation
		*p: nfilesize
		*p: nfiletoedit
		*p: nnumberofbytes
		*p: npointerlocation
		*p: nsearchdirection
		*p: nsearchfrom
		*a: atwodigithexarray[256,0]
	*</DefinedPropArrayMethod>

	AutoRelease = .T.
	cfindstrhname = 		&& Name of file used for hex search string
	cfindstrname = 		&& Name of file used for character representation of search string
	chexarrayname = 
	chighlightarrayname = 
	coldcompat = 
	coldonesca = 
	coldsetesca = 
	csearchstring = 
	ctemptable = 
	DataSession = 2
	lformsetlostfocus = .T.
	Name = "Hexedit"
	ncolnum = 0
	ndesiredlocation = 0
	nfilesize = 0
	nfiletoedit = 0
	nnumberofbytes = 0
	npointerlocation = 0
	nsearchdirection = 1
	nsearchfrom = 2

	ADD OBJECT 'frmFindStr' AS form WITH ;
		AlwaysOnTop = .T., ;
		BorderStyle = 1, ;
		Caption = "Enter String to Find", ;
		Closable = .F., ;
		DoCreate = .T., ;
		Enabled = .F., ;
		Height = 269, ;
		Left = 133, ;
		MaxButton = .F., ;
		MinButton = .F., ;
		Name = "frmFindStr", ;
		ShowWindow = 2, ;
		Top = 42, ;
		Visible = .F., ;
		Width = 437
		*< END OBJECT: BaseClass="form" />

	ADD OBJECT 'frmFindStr.chkCaseSen' AS checkbox WITH ;
		Caption = "Case \<sensitive", ;
		ControlSource = "", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 44, ;
		Name = "chkCaseSen", ;
		TabIndex = 7, ;
		Top = 186, ;
		Value = .F., ;
		Width = 121
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'frmFindStr.cmdCancel' AS commandbutton WITH ;
		AutoSize = .F., ;
		Cancel = .T., ;
		Caption = "\<Cancel", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 272, ;
		Name = "cmdCancel", ;
		TabIndex = 11, ;
		Top = 224, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmFindStr.cmdFind' AS commandbutton WITH ;
		Caption = "\<Find", ;
		Default = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 80, ;
		Name = "cmdFind", ;
		TabIndex = 10, ;
		Top = 224, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmFindStr.grdChar' AS grid WITH ;
		AllowHeaderSizing = .F., ;
		AllowRowSizing = .F., ;
		ColumnCount = 15, ;
		DeleteMark = .F., ;
		FontSize = 10, ;
		GridLines = 0, ;
		GridLineWidth = 1, ;
		HeaderHeight = 0, ;
		Height = 24, ;
		Highlight = .F., ;
		HighlightRow = .F., ;
		Left = 60, ;
		Name = "grdChar", ;
		RecordMark = .F., ;
		RecordSource = "FindStr", ;
		RowHeight = 22, ;
		ScrollBars = 0, ;
		SplitBar = .F., ;
		TabIndex = 2, ;
		Top = 33, ;
		Width = 319, ;
		Column1.Alignment = 2, ;
		Column1.FontBold = .T., ;
		Column1.FontName = "MS Sans Serif", ;
		Column1.FontSize = 10, ;
		Column1.Name = "Column1", ;
		Column1.SelectOnEntry = .T., ;
		Column1.Width = 20, ;
		Column10.Alignment = 2, ;
		Column10.FontBold = .T., ;
		Column10.FontName = "MS Sans Serif", ;
		Column10.FontSize = 10, ;
		Column10.Name = "Column10", ;
		Column10.SelectOnEntry = .T., ;
		Column10.Width = 20, ;
		Column11.Alignment = 2, ;
		Column11.FontBold = .T., ;
		Column11.FontName = "MS Sans Serif", ;
		Column11.FontSize = 10, ;
		Column11.Name = "Column11", ;
		Column11.SelectOnEntry = .T., ;
		Column11.Width = 20, ;
		Column12.Alignment = 2, ;
		Column12.FontBold = .T., ;
		Column12.FontName = "MS Sans Serif", ;
		Column12.FontSize = 10, ;
		Column12.Name = "Column12", ;
		Column12.SelectOnEntry = .T., ;
		Column12.Width = 20, ;
		Column13.Alignment = 2, ;
		Column13.FontBold = .T., ;
		Column13.FontName = "MS Sans Serif", ;
		Column13.FontSize = 10, ;
		Column13.Name = "Column13", ;
		Column13.SelectOnEntry = .T., ;
		Column13.Width = 20, ;
		Column14.Alignment = 2, ;
		Column14.FontBold = .T., ;
		Column14.FontName = "MS Sans Serif", ;
		Column14.FontSize = 10, ;
		Column14.Name = "Column14", ;
		Column14.SelectOnEntry = .T., ;
		Column14.Width = 20, ;
		Column15.Alignment = 2, ;
		Column15.FontBold = .T., ;
		Column15.FontName = "MS Sans Serif", ;
		Column15.FontSize = 10, ;
		Column15.ForeColor = 0,0,0, ;
		Column15.Name = "Column15", ;
		Column15.SelectOnEntry = .T., ;
		Column15.Width = 20, ;
		Column2.Alignment = 2, ;
		Column2.FontBold = .T., ;
		Column2.FontName = "MS Sans Serif", ;
		Column2.FontSize = 10, ;
		Column2.Name = "Column2", ;
		Column2.SelectOnEntry = .T., ;
		Column2.Width = 20, ;
		Column3.Alignment = 2, ;
		Column3.FontBold = .T., ;
		Column3.FontName = "MS Sans Serif", ;
		Column3.FontSize = 10, ;
		Column3.Name = "Column3", ;
		Column3.SelectOnEntry = .T., ;
		Column3.Width = 20, ;
		Column4.Alignment = 2, ;
		Column4.FontBold = .T., ;
		Column4.FontName = "MS Sans Serif", ;
		Column4.FontSize = 10, ;
		Column4.Name = "Column4", ;
		Column4.SelectOnEntry = .T., ;
		Column4.Width = 20, ;
		Column5.Alignment = 2, ;
		Column5.FontBold = .T., ;
		Column5.FontName = "MS Sans Serif", ;
		Column5.FontSize = 10, ;
		Column5.Name = "Column5", ;
		Column5.SelectOnEntry = .T., ;
		Column5.Width = 20, ;
		Column6.Alignment = 2, ;
		Column6.FontBold = .T., ;
		Column6.FontName = "MS Sans Serif", ;
		Column6.FontSize = 10, ;
		Column6.Name = "Column6", ;
		Column6.SelectOnEntry = .T., ;
		Column6.Width = 20, ;
		Column7.Alignment = 2, ;
		Column7.FontBold = .T., ;
		Column7.FontName = "MS Sans Serif", ;
		Column7.FontSize = 10, ;
		Column7.Name = "Column7", ;
		Column7.SelectOnEntry = .T., ;
		Column7.Width = 20, ;
		Column8.Alignment = 2, ;
		Column8.FontBold = .T., ;
		Column8.FontName = "MS Sans Serif", ;
		Column8.FontSize = 10, ;
		Column8.Name = "Column8", ;
		Column8.SelectOnEntry = .T., ;
		Column8.Width = 20, ;
		Column9.Alignment = 2, ;
		Column9.FontBold = .T., ;
		Column9.FontName = "MS Sans Serif", ;
		Column9.FontSize = 10, ;
		Column9.Name = "Column9", ;
		Column9.SelectOnEntry = .T., ;
		Column9.Width = 20
		*< END OBJECT: BaseClass="grid" />

	ADD OBJECT 'frmFindStr.grdChar.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdChar.Column1.Text1' AS txtfindstring WITH ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdChar.Column10.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdChar.Column10.Text1' AS txtfindstring WITH ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdChar.Column11.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdChar.Column11.Text1' AS txtfindstring WITH ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdChar.Column12.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdChar.Column12.Text1' AS txtfindstring WITH ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdChar.Column13.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdChar.Column13.Text1' AS txtfindstring WITH ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdChar.Column14.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdChar.Column14.Text1' AS txtfindstring WITH ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdChar.Column15.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdChar.Column15.Text1' AS txtfindstring WITH ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 10, ;
		ForeColor = 0,0,0, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdChar.Column2.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdChar.Column2.Text1' AS txtfindstring WITH ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdChar.Column3.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdChar.Column3.Text1' AS txtfindstring WITH ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdChar.Column4.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdChar.Column4.Text1' AS txtfindstring WITH ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdChar.Column5.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdChar.Column5.Text1' AS txtfindstring WITH ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdChar.Column6.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdChar.Column6.Text1' AS txtfindstring WITH ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdChar.Column7.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdChar.Column7.Text1' AS txtfindstring WITH ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdChar.Column8.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdChar.Column8.Text1' AS txtfindstring WITH ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdChar.Column9.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 10, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdChar.Column9.Text1' AS txtfindstring WITH ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdHex' AS grid WITH ;
		AllowHeaderSizing = .F., ;
		AllowRowSizing = .F., ;
		ColumnCount = 15, ;
		DeleteMark = .F., ;
		FontName = "Courier", ;
		GridLines = 0, ;
		HeaderHeight = 0, ;
		Height = 24, ;
		HighlightRow = .F., ;
		Left = 60, ;
		Name = "grdHex", ;
		RecordMark = .F., ;
		RecordSource = "FindStrH", ;
		RowHeight = 22, ;
		ScrollBars = 0, ;
		SplitBar = .F., ;
		TabIndex = 4, ;
		Top = 81, ;
		Width = 319, ;
		Column1.Alignment = 2, ;
		Column1.ControlSource = "", ;
		Column1.FontBold = .T., ;
		Column1.FontName = "Courier", ;
		Column1.FontSize = 10, ;
		Column1.Name = "Column1", ;
		Column1.Width = 20, ;
		Column10.Alignment = 2, ;
		Column10.ControlSource = "", ;
		Column10.FontBold = .T., ;
		Column10.FontName = "Courier", ;
		Column10.FontSize = 10, ;
		Column10.Name = "Column10", ;
		Column10.Width = 20, ;
		Column11.Alignment = 2, ;
		Column11.ControlSource = "", ;
		Column11.FontBold = .T., ;
		Column11.FontName = "Courier", ;
		Column11.FontSize = 10, ;
		Column11.Name = "Column11", ;
		Column11.Width = 20, ;
		Column12.Alignment = 2, ;
		Column12.ControlSource = "", ;
		Column12.FontBold = .T., ;
		Column12.FontName = "Courier", ;
		Column12.FontSize = 10, ;
		Column12.Name = "Column12", ;
		Column12.Width = 20, ;
		Column13.Alignment = 2, ;
		Column13.ControlSource = "", ;
		Column13.FontBold = .T., ;
		Column13.FontName = "Courier", ;
		Column13.FontSize = 10, ;
		Column13.Name = "Column13", ;
		Column13.Width = 20, ;
		Column14.Alignment = 2, ;
		Column14.ControlSource = "", ;
		Column14.FontBold = .T., ;
		Column14.FontName = "Courier", ;
		Column14.FontSize = 10, ;
		Column14.Name = "Column14", ;
		Column14.Width = 20, ;
		Column15.Alignment = 2, ;
		Column15.ControlSource = "", ;
		Column15.FontBold = .T., ;
		Column15.FontName = "Courier", ;
		Column15.FontSize = 10, ;
		Column15.Name = "Column15", ;
		Column15.Width = 20, ;
		Column2.Alignment = 2, ;
		Column2.ControlSource = "", ;
		Column2.FontBold = .T., ;
		Column2.FontName = "Courier", ;
		Column2.FontSize = 10, ;
		Column2.Name = "Column2", ;
		Column2.Width = 20, ;
		Column3.Alignment = 2, ;
		Column3.ControlSource = "", ;
		Column3.FontBold = .T., ;
		Column3.FontName = "Courier", ;
		Column3.FontSize = 10, ;
		Column3.Name = "Column3", ;
		Column3.Width = 20, ;
		Column4.Alignment = 2, ;
		Column4.ControlSource = "", ;
		Column4.FontBold = .T., ;
		Column4.FontName = "Courier", ;
		Column4.FontSize = 10, ;
		Column4.Name = "Column4", ;
		Column4.Width = 20, ;
		Column5.Alignment = 2, ;
		Column5.ControlSource = "", ;
		Column5.FontBold = .T., ;
		Column5.FontName = "Courier", ;
		Column5.FontSize = 10, ;
		Column5.Name = "Column5", ;
		Column5.Width = 20, ;
		Column6.Alignment = 2, ;
		Column6.ControlSource = "", ;
		Column6.FontBold = .T., ;
		Column6.FontName = "Courier", ;
		Column6.FontSize = 10, ;
		Column6.Name = "Column6", ;
		Column6.Width = 20, ;
		Column7.Alignment = 2, ;
		Column7.ControlSource = "", ;
		Column7.FontBold = .T., ;
		Column7.FontName = "Courier", ;
		Column7.FontSize = 10, ;
		Column7.Name = "Column7", ;
		Column7.Width = 20, ;
		Column8.Alignment = 2, ;
		Column8.ControlSource = "", ;
		Column8.FontBold = .T., ;
		Column8.FontName = "Courier", ;
		Column8.FontSize = 10, ;
		Column8.Name = "Column8", ;
		Column8.Width = 20, ;
		Column9.Alignment = 2, ;
		Column9.ControlSource = "", ;
		Column9.FontBold = .T., ;
		Column9.FontName = "Courier", ;
		Column9.FontSize = 10, ;
		Column9.Name = "Column9", ;
		Column9.Width = 20
		*< END OBJECT: BaseClass="grid" />

	ADD OBJECT 'frmFindStr.grdHex.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontName = "Courier", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdHex.Column1.Text1' AS txtfindstringhex WITH ;
		FontBold = .T., ;
		FontName = "Courier", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdHex.Column10.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontName = "Courier", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdHex.Column10.Text1' AS txtfindstringhex WITH ;
		FontBold = .T., ;
		FontName = "Courier", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdHex.Column11.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontName = "Courier", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdHex.Column11.Text1' AS txtfindstringhex WITH ;
		FontBold = .T., ;
		FontName = "Courier", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdHex.Column12.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontName = "Courier", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdHex.Column12.Text1' AS txtfindstringhex WITH ;
		FontBold = .T., ;
		FontName = "Courier", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdHex.Column13.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontName = "Courier", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdHex.Column13.Text1' AS txtfindstringhex WITH ;
		FontBold = .T., ;
		FontName = "Courier", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdHex.Column14.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontName = "Courier", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdHex.Column14.Text1' AS txtfindstringhex WITH ;
		FontBold = .T., ;
		FontName = "Courier", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdHex.Column15.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontName = "Courier", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdHex.Column15.Text1' AS txtfindstringhex WITH ;
		FontBold = .T., ;
		FontName = "Courier", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdHex.Column2.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontName = "Courier", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdHex.Column2.Text1' AS txtfindstringhex WITH ;
		FontBold = .T., ;
		FontName = "Courier", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdHex.Column3.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontName = "Courier", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdHex.Column3.Text1' AS txtfindstringhex WITH ;
		FontBold = .T., ;
		FontName = "Courier", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdHex.Column4.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontName = "Courier", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdHex.Column4.Text1' AS txtfindstringhex WITH ;
		FontBold = .T., ;
		FontName = "Courier", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdHex.Column5.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontName = "Courier", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdHex.Column5.Text1' AS txtfindstringhex WITH ;
		FontBold = .T., ;
		FontName = "Courier", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdHex.Column6.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontName = "Courier", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdHex.Column6.Text1' AS txtfindstringhex WITH ;
		FontBold = .T., ;
		FontName = "Courier", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdHex.Column7.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontName = "Courier", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdHex.Column7.Text1' AS txtfindstringhex WITH ;
		FontBold = .T., ;
		FontName = "Courier", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdHex.Column8.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontName = "Courier", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdHex.Column8.Text1' AS txtfindstringhex WITH ;
		FontBold = .T., ;
		FontName = "Courier", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.grdHex.Column9.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontName = "Courier", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmFindStr.grdHex.Column9.Text1' AS txtfindstringhex WITH ;
		FontBold = .T., ;
		FontName = "Courier", ;
		FontSize = 10, ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmFindStr.Label1' AS label WITH ;
		Caption = "Character:", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 13, ;
		Left = 32, ;
		Name = "Label1", ;
		TabIndex = 1, ;
		Top = 13, ;
		Width = 93
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmFindStr.Label2' AS label WITH ;
		Caption = "Hex:", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 13, ;
		Left = 32, ;
		Name = "Label2", ;
		TabIndex = 3, ;
		Top = 62, ;
		Width = 105
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmFindStr.Label3' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Search from", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 242, ;
		Name = "Label3", ;
		TabIndex = 8, ;
		Top = 120, ;
		Width = 59
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmFindStr.Label4' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Search direction", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 50, ;
		Name = "Label4", ;
		TabIndex = 5, ;
		Top = 120, ;
		Width = 79
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmFindStr.optSearchDirection' AS optiongroup WITH ;
		ButtonCount = 2, ;
		ControlSource = "THISFORMSET.nSearchDirection", ;
		Height = 52, ;
		Left = 44, ;
		Name = "optSearchDirection", ;
		TabIndex = 6, ;
		Top = 128, ;
		Value = 1, ;
		Width = 157, ;
		Option1.BackStyle = 0, ;
		Option1.Caption = "Fo\<rward", ;
		Option1.FontName = "MS Sans Serif", ;
		Option1.FontSize = 8, ;
		Option1.Height = 18, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 9, ;
		Option1.Value = 1, ;
		Option1.Width = 140, ;
		Option2.BackStyle = 0, ;
		Option2.Caption = "Bac\<kward", ;
		Option2.FontName = "MS Sans Serif", ;
		Option2.FontSize = 8, ;
		Option2.Height = 18, ;
		Option2.Left = 5, ;
		Option2.Name = "Option2", ;
		Option2.Top = 29, ;
		Option2.Value = 0, ;
		Option2.Width = 152
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'frmFindStr.optSearchFrom' AS optiongroup WITH ;
		ButtonCount = 3, ;
		ControlSource = "THISFORMSET.nSearchFrom", ;
		Height = 73, ;
		Left = 236, ;
		Name = "optSearchFrom", ;
		TabIndex = 9, ;
		Top = 128, ;
		Value = 1, ;
		Width = 157, ;
		Option1.BackStyle = 0, ;
		Option1.Caption = "\<Beginning of file", ;
		Option1.FontName = "MS Sans Serif", ;
		Option1.FontSize = 8, ;
		Option1.Height = 18, ;
		Option1.Left = 5, ;
		Option1.Name = "option1", ;
		Option1.Top = 9, ;
		Option1.Value = 1, ;
		Option1.Width = 152, ;
		Option2.BackStyle = 0, ;
		Option2.Caption = "C\<urrent location", ;
		Option2.FontName = "MS Sans Serif", ;
		Option2.FontSize = 8, ;
		Option2.Height = 18, ;
		Option2.Left = 5, ;
		Option2.Name = "option2", ;
		Option2.Top = 29, ;
		Option2.Value = 0, ;
		Option2.Width = 152, ;
		Option3.BackStyle = 0, ;
		Option3.Caption = "\<End of file", ;
		Option3.FontName = "MS Sans Serif", ;
		Option3.FontSize = 8, ;
		Option3.Height = 18, ;
		Option3.Left = 5, ;
		Option3.Name = "option3", ;
		Option3.Top = 49, ;
		Option3.Value = 0, ;
		Option3.Width = 164
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'frmGotoSect' AS form WITH ;
		AlwaysOnTop = .T., ;
		BorderStyle = 1, ;
		Caption = "Enter Jump Address", ;
		Closable = .F., ;
		DoCreate = .T., ;
		Enabled = .F., ;
		Height = 149, ;
		Left = 41, ;
		MaxButton = .F., ;
		MinButton = .F., ;
		Name = "frmGotoSect", ;
		ShowWindow = 2, ;
		Top = 30, ;
		Visible = .F., ;
		Width = 363, ;
		WindowType = 1
		*< END OBJECT: BaseClass="form" />

	ADD OBJECT 'frmGotoSect.cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 232, ;
		Name = "cmdCancel", ;
		TabIndex = 4, ;
		Top = 108, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmGotoSect.cmdOK' AS commandbutton WITH ;
		Caption = "OK", ;
		Default = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 56, ;
		Name = "cmdOK", ;
		TabIndex = 3, ;
		Top = 108, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmGotoSect.Label1' AS label WITH ;
		Alignment = 1, ;
		Caption = "Decimal:", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 25, ;
		Left = 21, ;
		Name = "Label1", ;
		TabIndex = 5, ;
		Top = 64, ;
		Width = 80
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmGotoSect.Label2' AS label WITH ;
		Alignment = 1, ;
		Caption = "Hex:", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 25, ;
		Left = 21, ;
		Name = "Label2", ;
		TabIndex = 6, ;
		Top = 20, ;
		Width = 80
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmGotoSect.txtDecimalAddress' AS textbox WITH ;
		ControlSource = "THISFORMSET.cDecimalAddress", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		InputMask = "9999999999", ;
		Left = 112, ;
		Name = "txtDecimalAddress", ;
		TabIndex = 2, ;
		Top = 64, ;
		Width = 193
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'frmGotoSect.txtHexAddress' AS textbox WITH ;
		ControlSource = "THISFORMSET.cHexAddress", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		InputMask = "!!!!!!!!", ;
		Left = 112, ;
		Name = "txtHexAddress", ;
		TabIndex = 1, ;
		Top = 20, ;
		Width = 193
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor' AS form WITH ;
		AutoCenter = .T., ;
		BorderStyle = 1, ;
		Caption = "HexEdit", ;
		DoCreate = .T., ;
		Height = 360, ;
		KeyPreview = .T., ;
		MaxButton = .F., ;
		Name = "frmHexEditor", ;
		ShowTips = .T., ;
		ShowWindow = 2, ;
		Width = 613
		*< END OBJECT: BaseClass="form" />

	ADD OBJECT 'frmHexEditor.cmdBottomOfFile' AS commandbutton WITH ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 47, ;
		Left = 575, ;
		Name = "cmdBottomOfFile", ;
		Picture = dnbottom.bmp, ;
		TabIndex = 5, ;
		ToolTipText = "Read Last 2k Sector   (Ctrl+End)", ;
		Top = 269, ;
		Width = 30
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmHexEditor.cmdClose' AS commandbutton WITH ;
		Caption = "Close", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 516, ;
		Name = "cmdClose", ;
		TabIndex = 12, ;
		Top = 327, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmHexEditor.cmdFile' AS commandbutton WITH ;
		Caption = "Select Fi\<le...", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 8, ;
		Name = "cmdFile", ;
		TabIndex = 13, ;
		ToolTipText = "", ;
		Top = 11, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmHexEditor.cmdFind' AS commandbutton WITH ;
		Caption = "\<Find...", ;
		Enabled = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 252, ;
		Name = "cmdFind", ;
		TabIndex = 9, ;
		ToolTipText = "Search for a string", ;
		Top = 328, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmHexEditor.cmdFindNext' AS commandbutton WITH ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 23, ;
		Left = 330, ;
		Name = "cmdFindNext", ;
		Picture = right.bmp, ;
		TabIndex = 10, ;
		ToolTipText = "Search forward   (F3)", ;
		Top = 328, ;
		Width = 25
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmHexEditor.cmdFindPrevious' AS commandbutton WITH ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 23, ;
		Left = 222, ;
		Name = "cmdFindPrevious", ;
		Picture = left.bmp, ;
		TabIndex = 8, ;
		ToolTipText = "Search backward   (Shift+F3)", ;
		Top = 328, ;
		Width = 25
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmHexEditor.cmdGoToAddress' AS commandbutton WITH ;
		Caption = "\<Jump...", ;
		Enabled = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 401, ;
		Name = "cmdGoToAddress", ;
		TabIndex = 11, ;
		ToolTipText = "Jump to a specific address", ;
		Top = 328, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmHexEditor.cmdNextSector' AS commandbutton WITH ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 65, ;
		Left = 575, ;
		Name = "cmdNextSector", ;
		Picture = dnarrow.bmp, ;
		TabIndex = 4, ;
		ToolTipText = "Read Next 2k Sector   (Ctrl+PgDn)", ;
		Top = 204, ;
		Width = 30
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmHexEditor.cmdPreviousSector' AS commandbutton WITH ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 65, ;
		Left = 575, ;
		Name = "cmdPreviousSector", ;
		Picture = uparrow.bmp, ;
		TabIndex = 3, ;
		ToolTipText = "Read Previous 2k Sector   (Ctrl+PgUp)", ;
		Top = 91, ;
		Width = 30
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmHexEditor.cmdRevertEdits' AS commandbutton WITH ;
		Caption = "\<Undo Edits", ;
		Enabled = .F., ;
		FontName = "MS Sans Serif", ;
		Height = 23, ;
		Left = 104, ;
		Name = "cmdRevertEdits", ;
		TabIndex = 7, ;
		ToolTipText = "", ;
		Top = 328, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmHexEditor.cmdSaveEdits' AS commandbutton WITH ;
		Caption = "\<Save Edits", ;
		Enabled = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 9, ;
		Height = 23, ;
		Left = 24, ;
		Name = "cmdSaveEdits", ;
		TabIndex = 6, ;
		ToolTipText = "", ;
		Top = 328, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmHexEditor.cmdTopOfFile' AS commandbutton WITH ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 47, ;
		Left = 575, ;
		Name = "cmdTopOfFile", ;
		Picture = uptop.bmp, ;
		TabIndex = 2, ;
		ToolTipText = "Read First 2k Sector  (Ctrl+Home)", ;
		Top = 44, ;
		Width = 30
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'frmHexEditor.grdData' AS grid WITH ;
		AllowHeaderSizing = .F., ;
		AllowRowSizing = .F., ;
		ColumnCount = 18, ;
		DeleteMark = .F., ;
		Enabled = .T., ;
		FontName = "Courier", ;
		FontSize = 8, ;
		GridLines = 0, ;
		HeaderHeight = 15, ;
		Height = 272, ;
		Left = 8, ;
		Name = "grdData", ;
		RecordMark = .F., ;
		RecordSource = "HEXEDIT", ;
		RowHeight = 15, ;
		ScrollBars = 2, ;
		TabIndex = 1, ;
		Top = 44, ;
		Width = 560, ;
		Column1.Alignment = 2, ;
		Column1.DynamicForeColor = "", ;
		Column1.Enabled = .T., ;
		Column1.FontBold = .F., ;
		Column1.FontName = "Courier New", ;
		Column1.FontSize = 9, ;
		Column1.Movable = .F., ;
		Column1.Name = "Column1", ;
		Column1.ReadOnly = .T., ;
		Column1.Resizable = .F., ;
		Column1.Width = 76, ;
		Column10.DynamicForeColor = "", ;
		Column10.Enabled = .T., ;
		Column10.FontBold = .F., ;
		Column10.FontName = "Courier", ;
		Column10.FontSize = 9, ;
		Column10.Movable = .F., ;
		Column10.Name = "Column10", ;
		Column10.ReadOnly = .F., ;
		Column10.Resizable = .F., ;
		Column10.SelectOnEntry = .F., ;
		Column10.Width = 20, ;
		Column11.DynamicForeColor = "", ;
		Column11.Enabled = .T., ;
		Column11.FontBold = .F., ;
		Column11.FontName = "Courier", ;
		Column11.FontSize = 9, ;
		Column11.Movable = .F., ;
		Column11.Name = "Column11", ;
		Column11.ReadOnly = .F., ;
		Column11.Resizable = .F., ;
		Column11.SelectOnEntry = .F., ;
		Column11.Width = 20, ;
		Column12.DynamicForeColor = "", ;
		Column12.Enabled = .T., ;
		Column12.FontBold = .F., ;
		Column12.FontName = "Courier", ;
		Column12.FontSize = 9, ;
		Column12.Movable = .F., ;
		Column12.Name = "Column12", ;
		Column12.ReadOnly = .F., ;
		Column12.Resizable = .F., ;
		Column12.SelectOnEntry = .F., ;
		Column12.Width = 20, ;
		Column13.DynamicForeColor = "", ;
		Column13.Enabled = .T., ;
		Column13.FontBold = .F., ;
		Column13.FontName = "Courier", ;
		Column13.FontSize = 9, ;
		Column13.Movable = .F., ;
		Column13.Name = "Column13", ;
		Column13.ReadOnly = .F., ;
		Column13.Resizable = .F., ;
		Column13.SelectOnEntry = .F., ;
		Column13.Width = 20, ;
		Column14.DynamicForeColor = "", ;
		Column14.Enabled = .T., ;
		Column14.FontBold = .F., ;
		Column14.FontName = "Courier", ;
		Column14.FontSize = 9, ;
		Column14.Movable = .F., ;
		Column14.Name = "Column14", ;
		Column14.ReadOnly = .F., ;
		Column14.Resizable = .F., ;
		Column14.SelectOnEntry = .F., ;
		Column14.Width = 20, ;
		Column15.DynamicForeColor = "", ;
		Column15.Enabled = .T., ;
		Column15.FontBold = .F., ;
		Column15.FontName = "Courier", ;
		Column15.FontSize = 9, ;
		Column15.Movable = .F., ;
		Column15.Name = "Column15", ;
		Column15.ReadOnly = .F., ;
		Column15.Resizable = .F., ;
		Column15.SelectOnEntry = .F., ;
		Column15.Width = 20, ;
		Column16.ColumnOrder = 16, ;
		Column16.DynamicForeColor = "", ;
		Column16.Enabled = .T., ;
		Column16.FontBold = .F., ;
		Column16.FontName = "Courier", ;
		Column16.FontSize = 9, ;
		Column16.Movable = .F., ;
		Column16.Name = "Column16", ;
		Column16.ReadOnly = .F., ;
		Column16.Resizable = .F., ;
		Column16.SelectOnEntry = .F., ;
		Column16.Width = 20, ;
		Column17.Bound = .T., ;
		Column17.ColumnOrder = 17, ;
		Column17.DynamicAlignment = "", ;
		Column17.DynamicForeColor = "", ;
		Column17.Enabled = .T., ;
		Column17.FontBold = .F., ;
		Column17.FontName = "Courier", ;
		Column17.FontSize = 9, ;
		Column17.Movable = .F., ;
		Column17.Name = "Column17", ;
		Column17.ReadOnly = .F., ;
		Column17.Resizable = .F., ;
		Column17.SelectOnEntry = .F., ;
		Column17.Width = 20, ;
		Column18.Alignment = 2, ;
		Column18.Enabled = .T., ;
		Column18.FontBold = .F., ;
		Column18.FontName = "Courier New", ;
		Column18.FontSize = 9, ;
		Column18.Movable = .F., ;
		Column18.Name = "Column18", ;
		Column18.ReadOnly = .T., ;
		Column18.Resizable = .F., ;
		Column18.Width = 144, ;
		Column2.Alignment = 0, ;
		Column2.DynamicForeColor = "", ;
		Column2.Enabled = .T., ;
		Column2.FontBold = .F., ;
		Column2.FontName = "Courier", ;
		Column2.FontSize = 9, ;
		Column2.Movable = .F., ;
		Column2.Name = "Column2", ;
		Column2.ReadOnly = .F., ;
		Column2.Resizable = .F., ;
		Column2.SelectOnEntry = .F., ;
		Column2.Width = 20, ;
		Column3.DynamicForeColor = "", ;
		Column3.Enabled = .T., ;
		Column3.FontBold = .F., ;
		Column3.FontName = "Courier", ;
		Column3.FontSize = 9, ;
		Column3.Movable = .F., ;
		Column3.Name = "Column3", ;
		Column3.ReadOnly = .F., ;
		Column3.Resizable = .F., ;
		Column3.SelectOnEntry = .F., ;
		Column3.Width = 20, ;
		Column4.DynamicForeColor = "", ;
		Column4.Enabled = .T., ;
		Column4.FontBold = .F., ;
		Column4.FontName = "Courier", ;
		Column4.FontSize = 9, ;
		Column4.Movable = .F., ;
		Column4.Name = "Column4", ;
		Column4.ReadOnly = .F., ;
		Column4.Resizable = .F., ;
		Column4.SelectOnEntry = .F., ;
		Column4.Width = 20, ;
		Column5.DynamicForeColor = "", ;
		Column5.Enabled = .T., ;
		Column5.FontBold = .F., ;
		Column5.FontName = "Courier", ;
		Column5.FontSize = 9, ;
		Column5.Movable = .F., ;
		Column5.Name = "Column5", ;
		Column5.ReadOnly = .F., ;
		Column5.Resizable = .F., ;
		Column5.SelectOnEntry = .F., ;
		Column5.Width = 20, ;
		Column6.DynamicForeColor = "", ;
		Column6.Enabled = .T., ;
		Column6.FontBold = .F., ;
		Column6.FontName = "Courier", ;
		Column6.FontSize = 9, ;
		Column6.Movable = .F., ;
		Column6.Name = "Column6", ;
		Column6.ReadOnly = .F., ;
		Column6.Resizable = .F., ;
		Column6.SelectOnEntry = .F., ;
		Column6.Width = 20, ;
		Column7.DynamicForeColor = "", ;
		Column7.Enabled = .T., ;
		Column7.FontBold = .F., ;
		Column7.FontName = "Courier", ;
		Column7.FontSize = 9, ;
		Column7.Movable = .F., ;
		Column7.Name = "Column7", ;
		Column7.ReadOnly = .F., ;
		Column7.Resizable = .F., ;
		Column7.SelectOnEntry = .F., ;
		Column7.Width = 20, ;
		Column8.DynamicForeColor = "", ;
		Column8.Enabled = .T., ;
		Column8.FontBold = .F., ;
		Column8.FontName = "Courier", ;
		Column8.FontSize = 9, ;
		Column8.Movable = .F., ;
		Column8.Name = "Column8", ;
		Column8.ReadOnly = .F., ;
		Column8.Resizable = .F., ;
		Column8.SelectOnEntry = .F., ;
		Column8.Width = 20, ;
		Column9.DynamicForeColor = "", ;
		Column9.Enabled = .T., ;
		Column9.FontBold = .F., ;
		Column9.FontName = "Courier", ;
		Column9.FontSize = 9, ;
		Column9.Movable = .F., ;
		Column9.Name = "Column9", ;
		Column9.ReadOnly = .F., ;
		Column9.Resizable = .F., ;
		Column9.SelectOnEntry = .F., ;
		Column9.Width = 20
		*< END OBJECT: BaseClass="grid" />

	ADD OBJECT 'frmHexEditor.grdData.Column1.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Address", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column1.Text1' AS refusefocus WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column10.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "8", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column10.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column11.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "9", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column11.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column12.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "A", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column12.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column13.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "B", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column13.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column14.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "C", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column14.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column15.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "D", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column15.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column16.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "E", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column16.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column17.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "F", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column17.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column18.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Text", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column18.Text1' AS refusefocus WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column2.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "0", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column2.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "1", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column3.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "2", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column4.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column5.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "3", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column5.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column6.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "4", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column6.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column7.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "5", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column7.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column8.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "6", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column8.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.grdData.Column9.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "7", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'frmHexEditor.grdData.Column9.Text1' AS text1 WITH ;
		Name = "Text1"
		*< END OBJECT: ClassLib="hexedit.vcx" BaseClass="textbox" />

	ADD OBJECT 'frmHexEditor.Label1' AS label WITH ;
		Alignment = 1, ;
		Caption = "File:", ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 13, ;
		Left = 84, ;
		Name = "Label1", ;
		TabIndex = 0, ;
		Top = 8, ;
		Width = 64
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmHexEditor.Label2' AS label WITH ;
		Alignment = 1, ;
		Caption = "Size:", ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 13, ;
		Left = 84, ;
		Name = "Label2", ;
		TabIndex = 0, ;
		Top = 25, ;
		Width = 64
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmHexEditor.lblCurrentFile' AS label WITH ;
		Caption = "<Filename>", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 160, ;
		Name = "lblCurrentFile", ;
		TabIndex = 0, ;
		Top = 8, ;
		Width = 445
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'frmHexEditor.lblDecFileSize' AS label WITH ;
		Caption = "<File Size>", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 13, ;
		Left = 160, ;
		Name = "lblDecFileSize", ;
		TabIndex = 0, ;
		Top = 25, ;
		Width = 177
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE Activate
		**  Store current environment settings.
		WITH THISFORMSET
		IF .lFormsetLostFocus
			.lFormsetLostFocus = .F.
			.cOldOnEsca = ON('Escape')
			.cOldSetEsca = SET('Escape')
			.lOldInsmode = INSMODE()
			.cOldBell = SET('BELL')
			.cOldCompat = SET("COMPAT")
		
			** Set environment to desired settings.
			ON ESCAPE lEscapePressed = .T.
			SET ESCAPE ON
			SET COMPAT OFF
			=INSMODE(.F.)	&& Turn on OverWrite mode.
			SET BELL OFF
		ENDIF
		ENDWITH
		* THISFORMSET.Refresh()
		** The DEACTIVATE event sets all the environment settings back
		** the way they were, so user can switch from this app to another
		** without causing problems.
	ENDPROC

	PROCEDURE checkkeystroke
		PARAMETER nKeyCode
		DO CASE
			CASE nKeyCode = 31	&& Ctrl + PgUp
				THISFORMSET.HexEditor.cmdPreviousSector.CLICK
			CASE nKeyCode = 30	&& Ctrl + PgDn
				THISFORMSET.HexEditor.cmdNextSector.CLICK
			CASE nKeyCode = 29	&& Ctrl + Home
				THISFORMSET.HexEditor.cmdTopOfFile.CLICK
			CASE nKeyCode = 23	&& Ctrl + End
				THISFORMSET.HexEditor.cmdBottomOfFile.CLICK
			CASE nKeyCode = -2	&& F3
				IF THISFORMSET.HexEditor.cmdFindNext.Enabled
					NODEFAULT
					THISFORMSET.HexEditor.cmdFindNext.Click
				ENDIF
			CASE nKeyCode = 86	&& Shift+F3
				IF THISFORMSET.HexEditor.cmdFindPrevious.Enabled
					NODEFAULT
					THISFORMSET.HexEditor.cmdFindPrevious.Click
				ENDIF
		
			OTHERWISE
				RETURN
		ENDCASE
		
	ENDPROC

	PROCEDURE cleargridhighlights
		*  Remove the DynamicForecolor functions from the grid columns.
		*  This method is called when reading in a new sector, if a string
		*  has been highlighted.
		THISFORMSET.HexEditor.grdData.SetAll("DynamicBackColor","")
		THISFORMSET.lStringHighlighted = .F.
		
	ENDPROC

	PROCEDURE Deactivate
		WITH THISFORMSET
		
		.lFormsetLostFocus = .T.
		
		** Set environment back the way it was before this app got focus.
		cOldCompat = .cOldCompat
		IF !ISBLANK(cOldCompat)			&& If old values were stored, 
			SET COMPAT &cOldCompat		&& set environment to old values.
		
			cOldEscape = .cOldOnEsca
			ON ESCAPE &cOldEscape
		
			cOldSetEscape = .cOldSetEsca
			SET ESCAPE &cOldSetEscape
		
			cOldBell = .cOldBell
			SET BELL &cOldBell
		
			=INSMODE(.lOldInsmode)
		ENDIF
		ENDWITH
		
		** Don't let other programs (or command window) print into this window.
		ACTIVATE SCREEN		
		
	ENDPROC

	PROCEDURE dec2hex
		PARAMETER nDecimal, nDigits
		**  Converts from base 10 to base 16.  Returns Hex notation in a string whose length
		**  is always at least 2.  The nDigits parameter can be specified to pad the
		**  string with zeroes.
		
		IF PARAMETERS() = 2
			RETURN RIGHT(TRANSFORM(nDecimal, "@0"), IIF(nDigits <= 8, nDigits, 8))
		ENDIF
		
		*  If no second parameter, must determine correct number of digits.
		nExponent = 2	&& Always return at least two characters.
		DO WHILE nExponent < 9
			IF nDecimal <= (16^nExponent)
				RETURN RIGHT(TRANSFORM(nDecimal, "@0"), nExponent)
			ENDIF
			nExponent = nExponent + 1
		ENDDO
	ENDPROC

	PROCEDURE fillhexarray
		** Create two-digit hex array to speed translation of data sectors.
		LOCAL aHexFF[256]
		FOR zzz = 0 to 255
			aHexFF[zzz + 1] = RIGHT(TRANSFORM(zzz, "@0"), 2)
		ENDFOR
		=ACOPY(aHexFF, THISFORMSET.aTwoDigitHexArray)
		RETURN
	ENDPROC

	PROCEDURE filltable
		PARAM nLastRow, nBytesInLastRow, nptrLocation, cWorkString
		
		** Make local copy of Hex translation array, to speed translation.
		LOCAL aHexFF[256]
		=ACOPY(THISFORMSET.aTwoDigitHexArray, aHexFF)
		
		
		LOCAL aFileData[nLastRow + 1, 18]
		aFileData = "  "	&& Clear array, so don't get "F" put into empty cells in table (uninitialized members).
		
		**  Loop to translate ascii into hex.
		**  Everything in the loop is optimized as much as possible, since each line is called
		**  128 times, and the statements in the inner loop are executed 2048 times.
		FOR nRow = 0 to nLastRow	
			nLastByte = IIF(nRow != nLastRow, 16, nBytesInLastRow)	&& Last byte in current row.
																	&& Will always be 16 bytes,
			nRowByte = (nRow * 16) + 1								&& Byte # of first byte in 
		
			**	Calculate Address of current row.
			nASCII = nptrlocation + nRowByte - 1
			
			**  Translate address into Hex.
			aFileData[nRow+1,1] = RIGHT(TRANSFORM(nASCII,"@0"), 8)				&& Pad Address column to 8 characters.
		
		
			** Copy current row of data into a smaller string.
			** (Working with a 16 byte string is faster than with a 2K string.)
			cTempString1 = SUBSTR(cWorkString, nRowByte, nLastByte)
			
			**  Translate ASCII data to Hex, and fill in appropriate columns in data array.
			FOR nColumn = 1 to nLastByte	&& nLastByte will be 16 except at end of file.
				** Use array of two-digit hex instead of translation function to increase speed.
				aFileData[nRow + 1, nColumn + 1] = aHexFF[ASC(SUBSTR(cTempString1, nColumn,1)) + 1]	
			NEXT
		
			** Put actual text into last column of array.
			aFileData[nRow + 1, 18] = cTempString1
		NEXT
		
		** Store translated data into table, so can be displayed in grid.
		INSERT INTO HEXEDIT FROM ARRAY aFileData
		
	ENDPROC

	PROCEDURE findstring
		LPARAMETERS cStringToFind, nSearchDirection, nSearchFrom, lCaseSen
		
		#DEFINE STRING_NOT_FOUND_LOC	"String not found."
		#DEFINE SEARCH_STATUS_LOC		"Search Status:"
		#DEFINE PRESS_ESCAPE_LOC		"Press [Escape] to cancel."
		
		WITH THISFORMSET
		
		* Set starting location for search.
		DO CASE
		CASE nSearchFrom = 1				&& Search from top of file
			nSearchLocation = 0
		CASE nSearchFrom = 2				&& Search from current location
			nSearchLocation = .nPointerLocation + ((RECNO() - 1)*16);
								+ IIF(.nColNum = 0, 1, .nColNum - 1)
		CASE nSearchFrom = 3				&& Search from bottom of file.
			nSearchLocation = .nFileSize
		ENDCASE
		
		
		nBytesToSearch = 2048	&& Read in 2K first time.  Increased to 16k on second read.
		nLargerBufferSize = 16384
		lEscapePressed = .F.
		
		.HexEditor.MousePointer = 11		&& Change mousepointer to hourglass.
		nStartTime = SECONDS()
		
		DO CASE
		CASE nSearchDirection = 1			&&	Search forwards.
			DO WHILE .T.
				IF SECONDS() > nStartTime + 1	&& Update status every second.
					nStartTime = SECONDS()
					* Mouse events aren't processed while code is being executed.  For better visual
					* effect, will force mousepointer back to hourglass in case user has moved mouse 
					* off VFP window and returned:
					.HexEditor.MousePointer = 11
					WAIT WINDOW SEARCH_STATUS_LOC + " " + STR((nSearchLocation/.nFileSize)*100,3,0) + "%";
					 + CHR(13) + PRESS_ESCAPE_LOC NOWAIT
				ENDIF
				**  Set file pointer to start of search area.
				nSearchLocation = FSEEK(.nFileToEdit, nSearchLocation, 0)
				**  Read in segment.
				cSeekWorkString = FREAD(.nFileToEdit, nBytesToSearch + LEN(cStringToFind)-1)
		
				IF lCaseSen = .T.								&& Look for string
					nStringLocation = AT(cStringToFind, cSeekWorkString)
				ELSE
					nStringLocation = ATC(cStringToFind, cSeekWorkString)
				ENDIF
		
				IF nStringLocation = 0							&& If string not found
					IF lEscapePressed							&& If user pressed escape
						.HexEditor.MousePointer = 0
						WAIT CLEAR
						RETURN									&& exit search function
					ENDIF
					IF LEN(cSeekWorkString) < nBytesToSearch	&& If at EOF().
						?? CHR(7)								&& Beep
						WAIT WINDOW STRING_NOT_FOUND_LOC NOWAIT	&& Inform user, then set file pointer back.
						.nPointerLocation=FSEEK(.nFileToEdit, .nPointerLocation, 0)	&& Return pointer to original location.
						.HexEditor.MousePointer = 0
						RETURN
					ELSE
						** If not at eof(), continue search.
						nSearchLocation = nSearchLocation + nBytesToSearch
						nBytesToSearch = nLargerBufferSize	&& Increase search buffer size
					ENDIF
				ELSE	&& Found string!!
					EXIT
				ENDIF
			ENDDO
						
		CASE nSearchDirection = 2	&&	Search backwards.
			DO WHILE .T.
				IF SECONDS() > nStartTime + 1	&& Update status every second.
					nStartTime = SECONDS()
					.HexEditor.MousePointer = 11
					WAIT WINDOW SEARCH_STATUS_LOC + " " + STR((nSearchLocation/.nFileSize)*100,3,0) + "%";
					 + CHR(13) + PRESS_ESCAPE_LOC  NOWAIT
				ENDIF
				** Position file pointer and read in data.
				nBytesToSearch = IIF(nSearchLocation > nBytesToSearch, nBytesToSearch, nSearchLocation - 1)
				nSearchLocation = FSEEK(.nFileToEdit, nSearchLocation - nBytesToSearch - 1, 0)	&& jump to search start location.
							&& nSearchLocation now points to end of next search string.
				cSeekWorkString = FREAD(.nFileToEdit, nBytesToSearch + LEN(cStringToFind) - 1)	&& read in segment.
				
				** Do search
				IF lCaseSen = .T.
					nStringLocation = RAT(cStringToFind, cSeekWorkString)
				ELSE
					&& There is no case-insensitive RAT function, so must simulate.
					nStringLocation = RAT(UPPER(cStringToFind), UPPER(cSeekWorkString))
				ENDIF
				
				IF nStringLocation = 0							&& If string not found
					IF lEscapePressed							&& If user pressed escape.
						.HexEditor.MousePointer = 0
						WAIT CLEAR
						RETURN									&& exit search function
					ENDIF
					IF nSearchLocation = 0					&& If at BOF().
						??	CHR(7)								&& Beep.
						WAIT WINDOW STRING_NOT_FOUND_LOC NOWAIT
						*  Return file pointer to last known coordinates.
						.nPointerLocation=FSEEK(.nFileToEdit, .nPointerLocation, 0)	&& Return pointer to original location.
						.HexEditor.MousePointer = 0
						RETURN
					ELSE									
						&& If not at BOF(), continue search.
						nBytesToSearch = nLargerBufferSize	&& Increase search buffer size
					ENDIF
				ELSE	&& Found string!!
					EXIT
				ENDIF
			ENDDO
		ENDCASE
		
		WAIT CLEAR
		
		** If we are here, we have found the desired string.
		** Now load sector into grid (if necessary), and highlight appropriate cells in grid.
		
		IF (nSearchLocation + nStringLocation) < (.nPointerLocation + 2048)	;
			AND (nSearchLocation + nStringLocation > .nPointerLocation)
		
			** String is in current sector. Calculate nFirstStringCell (offset to
			** first letter of string) with respect to current sector.
			nFirstStringCell = (nSearchLocation + nStringLocation) - .nPointerLocation
		ELSE
			*  Load in new sector.
			nDesiredLocation = INT((nSearchLocation + nStringLocation)/1024) * 1024	&& go to next 1k boundary.
			nFirstStringCell = nSearchLocation + nStringLocation - nDesiredLocation
		
			** Position file pointer at start of desired sector.
			.nPointerLocation = FSEEK(.nFileToEdit, nDesiredLocation, 0)
			.ReadSector(0, .T.)		&& Read data into table, leaving screen locked.
		ENDIF
		
		.HexEditor.LOCKSCREEN = .T.		&& turn off screen updates temporarily.
		
		** Calculate row (in current table) that first character is in.
		nFoundRowNumber = INT((nFirstStringCell - 1)/ 16) + 1
		SELECT HEXEDIT
		GOTO nFoundRowNumber					&& move there, so found string will be visible.
		*.lGridWasScrolled = .T.		&& Turn off THISFORMSET.readsector optimization
		
		** Now set the highlight color.  We already know where the first cell is.  
		nFirstStringColumn = (MOD(nFirstStringCell - 1,16) + 1)
		.SetGridHighlights(nFirstStringColumn, LEN(cStringToFind), nFoundRowNumber)
		ENDWITH
		
		WITH THISFORMSET.HexEditor
		.grdData.REFRESH	
		.MousePointer = 0
		
		** Set focus to first character in string
		.grdData.COLUMNS(MOD(nFirstStringCell - 1,16) + 1 + 1).SETFOCUS
		
		.LOCKSCREEN = .F.			&& Allow screen refreshes to happen.
		
		ENDWITH
	ENDPROC

	PROCEDURE hex2dec
		*********************************************
		*	Hex2Dec:	Translates Hex (in a string) to
		* 				a decimal
		*	Returns:	Numeric
		*********************************************
		LParameters cDigits
		RETURN EVALUATE("0x" + ALLTRIM(cDigits))
	ENDPROC

	PROCEDURE Init
		PARAMETER cFileToLoad
		
		IF TYPE('cFileToLoad') != 'C'
		*RETURN
			#DEFINE PICK_LOC "Choose a file to open in HexEdit."
			WAIT WINDOW PICK_LOC NOWAIT NOCLEAR
			*  Open the file.
			DO WHILE ! THISFORMSET.HexEditor.cmdFile.Click(cFileToLoad, .T.)
				*  Loop in case file selected was zero-length.
			ENDDO
		
			THISFORMSET.HexEditor.grdData.Recordsource = "HexEdit"
		
		ELSE
			*  If filename passed from command line, just try once to open file.
			 THISFORMSET.HexEditor.cmdFile.Click(cFileToLoad, .T.)
		ENDIF
		
		WAIT CLEAR
		
		*  If we couldn't open a file, exit.
		IF THISFORMSET.nFileToEdit = 0
			RELEASE THISFORMSET
			CANCEL	&& Prevent continuation of form load.
		ENDIF
	ENDPROC

	PROCEDURE Load
		WITH THISFORMSET
		
		.FillHexArray
		
		*  ON ESCAPE, SET ESCAPE and SET COMPAT are set in the Activate/Deactivate events.
		*  The following are scoped to the form's datasession, so can set them once and not
		*  worry about restoring them.
		set talk off
		SET SAFETY OFF
		SET CONFIRM OFF
		SET MULTI ON
		SET EXCLUSIVE ON
		
		
		.nPointerLocation = 0
		.nFileToEdit = 0
		.lSectorDirty = .F.
		.nColNum = 0
		
		*  Create table to be displayed in the grid.
		SELE 0
		.cTempTable = SYS(2023) + "\" + SUBSTR(SYS(2015), 3, 10) + ".TMP"
		CREATE TABLE (.cTempTable) (Address c(8), B1 c(2), B2 c(2), B3 c(2), ;
				B4 c(2), B5 c(2), B6 c(2), B7 c(2), B8 c(2), B9 c(2), B10 c(2), B11 c(2),;
				B12 c(2), B13 c(2), B14 c(2), B15 c(2), B16 c(2), Text c(16))
		
		USE (.cTempTable) EXCLUSIVE ALIAS "HEXEDIT"
		=CURSORSETPROP('BUFFERING', 5, "HEXEDIT")
		
		** Create tables for use in the FindStr form.
		SELE 0
		.cFindStrName = SYS(2023) + "\" + SUBSTR(SYS(2015), 3, 10) + ".TMP"
		CREATE TABLE (.cFindStrName) (C1 C(1) ,C2 C(1) ,C3 C(1) ,C4 C(1)  , ;
						C5 C(1) ,C6 C(1) ,C7 C(1) ,C8 C(1) ,C9 C(1) ,C10 C(1) , ;
						C11 C(1) ,C12 C(1) ,C13 C(1) ,C14 C(1) ,C15 C(1)  )
		USE (.cFindStrName) ALIAS "FindStr"
		APPEND BLANK
		=CURSORSETPROP('BUFFERING', 5, "FindStr")
		
		SELE 0
		.cFindStrHName = SYS(2023) + "\" + SUBSTR(SYS(2015), 3, 10) + ".TMP"
		CREATE TABLE (.cFindStrHName) (C1 C(2),C2 C(2),C3 C(2),C4 C(2),C5 C(2),C6 C(2),C7 C(2),C8 C(2),C9 C(2),C10 C(2),C11 C(2),C12 C(2),C13 C(2),C14 C(2),C15 C(2) )
		CREATE TABLE (.cFindStrHName) (C1 C(2) ,C2 C(2) ,C3 C(2) ,C4 C(2)  , ;
						C5 C(2) ,C6 C(2) ,C7 C(2) ,C8 C(2) ,C9 C(2) ,C10 C(2) , ;
						C11 C(2) ,C12 C(2) ,C13 C(2) ,C14 C(2) ,C15 C(2)  )
		USE (.cFindStrHName) ALIAS "FindStrH"
		APPEND BLANK
		=CURSORSETPROP('BUFFERING', 5, "FindStrH")
		
		ENDWITH
	ENDPROC

	PROCEDURE readsector
		PARAMETER nDirection, lLeaveScreenLocked
		
		#DEFINE R_LOST_FILE_HANDLE_LOC	"Cannot access file.  Aborting program."
		#DEFINE R_APP_NAME_LOC			"HexEdit"
		
		*  Check access to file.
		IF NOT FFLUSH(THISFORMSET.nFileToEdit) OR SELECT("HexEdit") = 0
			* User has issued a CLOSE ALL. We're in trouble.
			=messagebox(R_LOST_FILE_HANDLE_LOC, 48, R_APP_NAME_LOC)
			RELEASE THISFORMSET
			RETURN
		ENDIF
		
		** Position file pointer at start of new sector.
		WITH THISFORMSET
		DO CASE
		CASE nDirection = 0		&& Read current sector
			* 	Do nothing.
			*   This param is only used when already FSEEKing in the file, so don't need
			*   to worry whether or not user has issued a CLOSE ALL from the command window.
		CASE nDirection = 1		&& Read next sector
			nOldLocation = .nPointerLocation
			.nPointerLocation = FSEEK(.nFileToEdit, 2048,1)	&& move 2k relative to current position.
			IF FEOF(.nFileToEdit)
				** If at end of file, move file pointer back where it was.
				.nPointerLocation = FSEEK(.nFileToEdit, nOldLocation,0)	
				RETURN
			ENDIF
		
		CASE nDirection = -1	&& Read previous sector
			IF .nPointerLocation <= 1
				** There is no previous sector.
				RETURN
			ELSE	&& Not at very top
				IF .nPointerLocation < 2048
					** Within 2k of top of file.  Move pointer to top of file.
					.nPointerLocation = FSEEK(.nFileToEdit, 0,0)
				ELSE	&& Not within 1 sector of top
					nOldLocation = .nPointerLocation
					** move 2k relative to current position.
					.nPointerLocation = FSEEK(.nFileToEdit, -2048,1)	
					IF .nPointerLocation < 0
						** If cannot move pointer for some unknown reason, put back where it was.
						.nPointerLocation = FSEEK(.nFileToEdit, nOldLocation,0)	&&Move back where it was.
					ENDIF
				ENDIF 	&& within 1 sector of top
			ENDIF
		ENDCASE
		
		**************************************************************************
		*** File pointer is now positioned.  Read sector into grid.
		
		IF .lStringHighlighted
			.ClearGridHighlights		&& Turn off highlights of "found" strings.
		ENDIF
		
		.HexEditor.LockScreen = .T.	&& Turn off screen updates while working.
							
		cWorkString = FREAD(.nFileToEdit, 2048)		&& Moves pointer, but nPointerLocation still pointing at beginning of sector.
		IF LEN("cWorkString") = 0		&& If user closed files.
			=messagebox(R_LOST_FILE_HANDLE_LOC, 48, R_APP_NAME_LOC)
			RELEASE THISFORMSET			&& Will close all tables in the Unload event.
			CANCEL
		ENDIF
		
		IF FEOF(.nFileToEdit)		&& If last sector, handle smaller amt of data
			.nNumberOfBytes = LEN(cWorkString)
			nLastRow = CEILING(.nNumberOfBytes/16) - 1
			nBytesInLastRow = MOD(.nNumberOfBytes - 1,16) + 1	&& If 16, returns 16 instead of 0.
		
			.HexEditor.cmdNextSector.ENABLED = .F.
			.HexEditor.cmdBottomOfFile.ENABLED = .F.
		ELSE
			.nNumberOfBytes = 2048
			nLastRow = 127
			nBytesInLastRow = 16
		
			.HexEditor.cmdNextSector.ENABLED = .T.
			.HexEditor.cmdBottomOfFile.ENABLED = .T.
		ENDIF
		
		
		IF .nPointerLocation = 0		&& If pointer was at 0 before read
			.HexEditor.cmdPreviousSector.ENABLED = .F.
			.HexEditor.cmdTopOfFile.ENABLED = .F.
		ELSE
			.HexEditor.cmdPreviousSector.ENABLED = .T.
			.HexEditor.cmdTopOfFile.ENABLED = .T.
		ENDIF
		
		=TableRevert(.T., "HEXEDIT")			&& revert any changes (should never be any at this point).
		=CursorSetProp("BUFF", 1, "HEXEDIT")	&& Turn buffering off to zap table.
		
		ZAP	IN HEXEDIT							&& Clear table for next sector of data.
		
		
		**  Read data into grid.
		=.Filltable(nLastRow, nBytesInLastRow, .nPointerLocation, cWorkString)
		
		**  Now move file pointer back to start of current sector.
		.nPointerLocation = FSEEK(.nFileToEdit, -.nNumberOfBytes, 1)	&& Return pointer to start of sector.
		
		
		GO TOP IN HEXEDIT
		=CursorSetProp("BUFF", 5, "HEXEDIT")			&& Turn buffering back on.
		
		.HexEditor.grdData.REFRESH
		IF .HexEditor.grdData.ActiveColumn > 0	&& focus is in grid.
			.HexEditor.grdData.Columns(.Hexeditor.grdData.ActiveColumn).SetFocus
		ENDIF
		
		*  Allow all the refreshes to happen (unless called by THISFORMSET.FindString).
		IF !lLeaveScreenLocked
			.HexEditor.LockScreen = .F.
		ENDIF
		ENDWITH
	ENDPROC

	PROCEDURE reportfileerror
		nFileErrorNumber = FERROR()
		
		#DEFINE ERR_LOC "File Error: "
		
		DO CASE
		CASE nFileErrorNumber = 2
			#DEFINE MSG_2_LOC "File not found."
			cMessageText = ERR_LOC + MSG_2_LOC
			
		CASE nFileErrorNumber = 4
			#DEFINE MSG_4_LOC "Out of file handles"
			cMessageText = ERR_LOC + MSG_4_LOC
			
		CASE nFileErrorNumber = 5
			#DEFINE MSG_5_LOC "Access denied."
			cMessageText = ERR_LOC + MSG_5_LOC
			
		CASE nFileErrorNumber = 6
			#DEFINE MSG_6_LOC "Invalid file handle. (programmer error)."
			cMessageText = ERR_LOC + MSG_6_LOC
			
		CASE nFileErrorNumber = 8
			#DEFINE MSG_8_LOC "Out of memory."
			cMessageText = ERR_LOC + MSG_8_LOC
			
		CASE nFileErrorNumber = 25
			#DEFINE MSG_25_LOC "File seek error."
			cMessageText = ERR_LOC + MSG_25_LOC
			
		CASE nFileErrorNumber = 29
			#DEFINE MSG_29_LOC "Disk is full."
			cMessageText = ERR_LOC + MSG_29_LOC
			
		CASE nFileErrorNumber = 31
			#DEFINE MSG_31_LOC "Error opening file."
			cMessageText = ERR_LOC + MSG_31_LOC
			
		OTHERWISE
			#DEFINE MSG_OTHER_LOC "Unexpected file I/O condition."
			cMessageText = MSG_OTHER_LOC
		ENDCASE
		
		=MESSAGEBOX(cMessageText)
		
	ENDPROC

	PROCEDURE setgridhighlights
		PARAM nFirstStringColumn, nStringLength, nFoundRowNumber
		
		**  The DynamicBackColor properties of the grid columns need to be evaluated
		**  for every visible cell in the grid, every time the grid is
		**  refreshed.  Therefore, it is important that the DynamicBackColor function
		**  is kept as short and optimized as possible.
		**  The format of the setting will be:
		**        =IIF(RECNO() = n, GREY, WHITE)
		**  The numbers for the record number, and the colors, will be hardwired in
		**  (instead of calling RGB() for each visible cell in the grid).
		
		
		
		cStartString = "IIF(RECNO() = "
		WITH THISFORMSET.HexEditor.grdData
		cEndString = ", " + STR(RGB(192,192,192)) + "," + STR(.BackColor) + ")"
		
		FOR nCurrentCol = 1 to 16		&& Search string limited to 15 chars, so don't need to
										&& worry about highlighting more than 1 row in a column.
			IF nCurrentCol < nFirstStringColumn		&& If column is before the start of the
													&& string on current row.
				IF nCurrentCol < (nStringLength - (16 - nFirstStringcolumn))
														&& See if string wraps around to 
														&& current column in next row.
					nHighLightRow = nFoundRowNumber + 1
				ELSE
					nHighLightRow = 0					&& Current column is not highlighted.
				ENDIF
			ELSE									&& current column is after the first character 
													&& of the string on the current row.
				IF nCurrentCol < (nFirstStringColumn + nStringLength)	&& If before the end of the
																		&&  string.
					nHighLightRow = nFoundRowNumber	&& Cell is highlighted in this row.
				ELSE
					nHighLightRow = 0				&& Column is not highlighted.
				ENDIF
			ENDIF
			IF nHighLightRow > 0					&& If current column requires a DynamicBackColor
													&& property.
				.COLUMNS(nCurrentCol+1).DynamicBackcolor = cStartString + STR(nHighLightRow,3,0) + cEndString
			ELSE									&& Otherwise, clear previous contents.
				.COLUMNS(nCurrentCol+1).DynamicBackcolor = ""
			ENDIF	
		NEXT
		ENDWITH
		THISFORMSET.lStringHighlighted = .T.
		
		
	ENDPROC

	PROCEDURE Unload
		WITH THISFORMSET
		
		IF SELECT("HEXEDIT") > 0
			=TableRevert(.T., "HEXEDIT")
			=CursorSetProp("BUFF", 1, "HEXEDIT")	&& Turn off table buffering.
			USE IN "HEXEDIT"
		ENDIF
		IF FFLUSH(.nFileToEdit)	&& Can access file.
			=FCLOSE(.nFileToEdit)
		ENDIF
		
		DELETE FILE (.cTempTable)
		
		
		IF SELECT("FindStr") > 0
			USE IN "FindStr"
		ENDIF
		IF SELECT("FindStrH") > 0
			USE IN "FindStrH"
		ENDIF
		
		DELETE FILE (.cFindStrName)
		DELETE FILE (.cFindStrHName)
		
		*IF "HEXED.VCX" $ SET("CLASSLIB")
		*	RELEASE CLASSLIB HEXED.VCX
		*ENDIF
		ENDWITH
		
		RELEASE THISFORMSET
	ENDPROC

	PROCEDURE writesector
		PARAMETER lWriteImmediately
		
		#DEFINE APP_NAME_LOC			"HexEdit"
		#DEFINE WRITE_CHANGES_LOC		"Sector has been edited.  Write changes to disk?"
		#DEFINE PROGRAM_ERR_LOC			"Program error."
		#DEFINE LOST_FILE_HANDLE_LOC	"Cannot access file.  Aborting program."
		
		IF SELECT("HexEdit") = 0 OR ;
				(THISFORMSET.nFileToEdit > 0 AND NOT FFLUSH(THISFORMSET.nFileToEdit))
			** User has closed files.  This form is not modal, so must handle case of CLOSE ALL
			** while form is open.
			=messagebox(LOST_FILE_HANDLE_LOC, 48, APP_NAME_LOC)
			RELEASE THISFORMSET
			CANCEL
		ENDIF
		
		
		IF !THISFORMSET.lSectorDirty
			IF GetNextModified(0, "HEXEDIT") != 0		&& If no records are buffered
				*  User clicked in textbox, but did not edit.
				=TableRevert(.T., "HEXEDIT")
				THISFORMSET.HexEditor.cmdSaveEdits.ENABLED = .F.
				THISFORMSET.HexEditor.cmdRevertEdits.ENABLED = .F.
			ENDIF
			RETURN .T.		&& Calling method may proceed to change sector, quit, open new file, etc.
		ENDIF
		
		IF lWriteImmediately
			nUserChoice = 6
		ELSE
			nUserChoice = MESSAGEBOX(WRITE_CHANGES_LOC, 3+48, APP_NAME_LOC)
		ENDIF
		
		DO CASE
		CASE nUserChoice = 6	&& Yes, write changes
			*Write edited information to disk
			*nPointerLocation is already at the start of our current sector
			*so just need to write the data.
			
			=TableUpdate(.T.,.F., "HEXEDIT")		&& Write changes to disk, so next revert doesn't
													&& revert these changes.
			THISFORMSET.lSectorDirty = .F.
			THISFORMSET.HexEditor.cmdSaveEdits.ENABLED = .F.		&& Disable buttons.
			THISFORMSET.HexEditor.cmdRevertEdits.ENABLED = .F.
		
			** Actually write the data here.  First determine exactly how much data to write.
			nLastRow = RECCOUNT("HEXEDIT")
			nBytesInLastRow = MOD(THISFORMSET.nNumberOfBytes - 1,16) + 1	&& If 16, returns 16 instead of 0.
			SELE HEXEDIT
			GO TOP
			cWorkString = ""
			
			** Compile all data into a single string.
			FOR nRow = 1 TO nLastRow
				IF nRow != nLastRow
					cWorkString = cWorkString + HEXEDIT.Text
				ELSE
					cWorkString = cWorkString + SUBSTR(HEXEDIT.Text,1,nBytesInLastRow)	&& Don't want spaces from empty cells
																						&& in case at end of file.
				ENDIF
				SKIP
			NEXT
			
			**  Write string out to file.
			nBytesWritten = FWRITE(THISFORMSET.nFileToEdit, cWorkString, THISFORMSET.nNumberOfBytes)
			nPointerLocation = FSEEK(THISFORMSET.nFileToEdit, THISFORMSET.nPointerLocation, 0)
			
			IF nBytesWritten != THISFORMSET.nNumberOfBytes
				THISFORMSET.ReportFileError
				RETURN .F.
			ENDIF		
			RETURN .T.
		
		CASE nUserChoice = 7	&& No, discard changes
			=TableRevert(.T., "HEXEDIT")
			THISFORMSET.lSectorDirty = .F.
			THISFORMSET.HexEditor.cmdSaveEdits.ENABLED = .F.
			THISFORMSET.HexEditor.cmdRevertEdits.ENABLED = .F.
			RETURN .T.
		CASE nUserChoice = 2	&& Cancel
			* Leave lSectorDirty the way it was, so user can write changes on next attempt.
			RETURN .F.
		OTHERWISE
			** Should never get here.
			=messagebox(PROGRAM_ERR_LOC)
			RETURN .F.
		ENDCASE
		
	ENDPROC

	PROCEDURE frmFindStr.Activate
		THISFORM.LOCKSCREEN = .T.
		SET CONFIRM OFF
		SET BELL OFF
		
		** Set current value for unbound control.  This way, THISFORMSET.lCaseSen is not changed
		** if user presses Cancel.
		THISFORM.chkCaseSen.VALUE = THISFORMSET.lCaseSen
		
		** The VALUE property of a textbox in a grid is not updated until that column
		** gets focus.  So if this is the second time into this form, the grid may
		** be blank, but the VALUE properties of the textbox in each column will contain
		** the data from the previous time.  Clear this data out of the Hex table.
		IF !ISBLANK(ALLTRIM(THISFORM.grdHex.Column1.Text1.Value))
			FOR nCurrentCol = 1 to 15
				THISFORM.grdHex.Columns(nCurrentCol).Text1.Value = ""
			NEXT
		ENDIF
		
		THISFORM.grdChar.Column1.Text1.SETFOCUS
		THISFORM.REFRESH
		
		THISFORM.LOCKSCREEN = .F.
		
		
		
	ENDPROC

	PROCEDURE frmFindStr.cmdCancel.Click
		THISFORMSET.HexEditor.ENABLED = .T.
		THISFORM.HIDE
		
	ENDPROC

	PROCEDURE frmFindStr.cmdFind.Click
		** Put data into a string.
		WITH THISFORMSET
		cTmpSearchString = ""
		FOR nCurrentChar = 1 TO 15
			IF !ISNULL(EVAL("FindStrH." + FIELD(nCurrentChar,"FindStrH"))) ;
				AND !ISBLANK(EVAL("FindStrH." + FIELD(nCurrentChar, "FindStrH")))
			      cTmpSearchString = cTmpSearchString + ;
			      		CHR(.HEX2DEC(EVAL("FindStrH." + FIELD(nCurrentChar,"FindStrH"))))
			ELSE
				EXIT
			ENDIF
		NEXT
		
		IF LEN(cTmpSearchString) = 0			&& If user didn't enter any data,
			RETURN								&& just return to main form.
		ENDIF
		
		** Put search params into properties so can be re-used by the Search Backwards
		** and Search Forwards buttons.
		.cSearchString = cTmpSearchString
		.lCaseSen = THISFORM.chkCaseSen.VALUE
		
		.HexEditor.ENABLED = .T.
		THISFORM.HIDE
		
		** Enable Search Backwards and Search Forwards buttons.
		.HexEditor.cmdFindPrevious.ENABLED = .T.
		.HexEditor.cmdFindNext.ENABLED = .T.
		.HexEditor.SHOW	
		
		*  FindString() could read the object properties directly, but it uses parameters to
		*  allow for easier future development.
		.FindString(.cSearchString, .nSearchDirection, .nSearchFrom, .lCaseSen)	
		ENDWITH
	ENDPROC

	PROCEDURE frmFindStr.Hide
		** Clear current data from tables.
		=tablerevert(.t., "findstr")
		=tablerevert(.t., "findstrh")
		THISFORM.Enabled = .F. 
	ENDPROC

	PROCEDURE frmFindStr.Init
		*  To allow this form to be moved inside the HexEdit Top-Level form, it 
		*  needs to have a unique name (so multiple instances of HexEdit don't get
		*  confused).  So we store an object reference to this form into a property of
		*  the formset.  We can then use that property to refer to this form just as if
		*  it were the form name.  Then assign a unique object name to this form using
		*  sys(2015).  See the HexEdit form's cmdFind.Click and cmdGoToAddress.Click 
		*  methods to see where this comes into play.
		THISFORMSET.FindStr = THIS	&& Store object reference into formset property.
		THIS.Name = SYS(2015)		&& Assign unique object name to this form.
		
		IF  fontmetric(1, 'MS Sans Serif', 8, '') # 13 OR ;
			fontmetric(4, 'MS Sans Serif', 8, '') # 2 OR ;
			fontmetric(6, 'MS Sans Serif', 8, '') # 5 OR ;
			fontmetric(7, 'MS Sans Serif', 8, '') # 11
			this.setall('fontname', 'Arial')
		ENDIF
		
	ENDPROC

	PROCEDURE frmFindStr.optSearchDirection.InteractiveChange
		&& Cannot search forward from end of file, nor backward from top of file.
		&& So make sure those combinations cannot be chosen.
		DO CASE
		CASE THIS.VALUE = 1		&&Search from beginning of file
			IF THISFORM.optSearchFrom.VALUE = 3
				THISFORM.optSearchFrom.VALUE = 2
				THISFORM.optSearchFrom.REFRESH
			ENDIF
		CASE THIS.VALUE = 2		&&Search from end of file.
			IF THISFORM.optSearchFrom.VALUE = 1
				THISFORM.optSearchFrom.VALUE = 2
				THISFORM.optSearchFrom.REFRESH
			ENDIF
		ENDCASE
		
	ENDPROC

	PROCEDURE frmFindStr.optSearchFrom.InteractiveChange
		&& Cannot search forward from end of file, nor backward from top of file.
		&& So make sure those combinations cannot be chosen.
		DO CASE
		CASE THIS.VALUE = 1		&&Search from beginning of file
			THISFORM.optSearchDirection.VALUE = 1
			THISFORM.optSearchDirection.REFRESH
		CASE THIS.VALUE = 3		&&Search from end of file.
			THISFORM.optSearchDirection.VALUE = 2
			THISFORM.optSearchDirection.REFRESH
		ENDCASE
		
	ENDPROC

	PROCEDURE frmGotoSect.cmdCancel.Click
		THISFORM.HIDE
	ENDPROC

	PROCEDURE frmGotoSect.cmdOK.Click
		#DEFINE ADDRESSBEYOND_LOC "Address beyond end of file.  Reading last sector."
		
		WITH THISFORMSET
		THISFORM.HIDE
		.HexEditor.SHOW
		
		IF ISBLANK(.cDecimalAddress)
			** No address to jump to.
			RETURN
		ENDIF
		
		.nDesiredLocation = VAL(.cDecimalAddress)
		
		** Store old pointer location, in case of error.
		nOldLocation = .nPointerLocation
		
		
		IF .nDesiredLocation >= .nFileSize
			WAIT WINDOW ADDRESSBEYOND_LOC  NOWAIT
			.nDesiredLocation = INT(.nFileSize / 2048) * 2048
			IF .nDesiredLocation = .nFileSize
				.nDesiredLocation = .nDesiredLocation - 2048
			ENDIF
		ENDIF
		
		** Move file pointer.
		.nPointerLocation = FSEEK(.nFileToEdit, .nDesiredLocation, 0)
		IF .nPointerLocation < 0
			&& File seek error.  Report, then move pointer back where it was.
			.REPORTFILEERROR
			.nPointerLocation = FSEEK(.nFileToEdit, nOldLocation,0)
		ENDIF
		
		** File pointer is positioned.  Read the sector.
		.ReadSector(0)
		ENDWITH
	ENDPROC

	PROCEDURE frmGotoSect.Hide
		=INSMODE(.F.)
		THISFORMSET.HexEditor.Enabled = .T.
		THISFORM.Enabled = .F.
	ENDPROC

	PROCEDURE frmGotoSect.Init
		*  To allow this form to be moved inside the HexEdit Top-Level form, it 
		*  needs to have a unique name (so multiple instances of HexEdit don't get
		*  confused).  So we store an object reference to this form to a property of
		*  the formset.  We can use that property to refer to this form just as if
		*  it were the form name.  Then assign a unique object name to this form using
		*  sys(2015).  See the HexEdit form's cmdFind.Click and cmdGoToAddress.Click 
		*  methods to see where this comes into play.
		THISFORMSET.GotoSect = THIS	&& Store object reference into formset property.
		THIS.Name = SYS(2015)		&& Assign unique object name to this form.
	ENDPROC

	PROCEDURE frmGotoSect.Show
		LPARAMETERS nStyle
		=INSMODE(.T.)
	ENDPROC

	PROCEDURE frmGotoSect.txtDecimalAddress.InteractiveChange
		** Translate and update OTHER field.
		WITH THISFORMSET
		.cHexAddress = .Dec2Hex(VAL(THIS.VALUE))
		.cDecimalAddress = THIS.VALUE	&& Force write to variable.
		ENDWITH
		THISFORM.txtHexAddress.REFRESH
		
	ENDPROC

	PROCEDURE frmGotoSect.txtDecimalAddress.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		** Must be numeric.  This is handled by the InputMask, but want to beep:
		IF NOT ((nKeyCode > 47 AND nKeyCode < 58) OR (nKeyCode > 0 AND nKeyCode < 24);
				OR (nKeyCode = 127) OR (nKeyCode = 27))
			?? CHR(7)		
			NODEFAULT
		ENDIF
		
	ENDPROC

	PROCEDURE frmGotoSect.txtHexAddress.InteractiveChange
		** Keypress event code has limited to correct keystrokes.
		** Now update OTHER field.
		WITH THISFORMSET
		.cDecimalAddress = ALLTRIM(STR(.Hex2Dec(THIS.VALUE)))
		THISFORM.txtDecimalAddress.REFRESH
		.cHexAddress = THIS.Value	&& force into variable.
		ENDWITH
	ENDPROC

	PROCEDURE frmGotoSect.txtHexAddress.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		*Must be numeric or in "ABCDEF"
		IF NOT (BETWEEN(nKeyCode, 48 ,57) OR BETWEEN(nKeyCode, 97, 102);
				OR BETWEEN(nKeyCode, 65, 70) OR BETWEEN(nKeyCode, 1, 23);
				OR (nKeyCode = 127) OR (nKeyCode = 27))
			?? CHR(7)		
			NODEFAULT
		ENDIF
			
		
	ENDPROC

	PROCEDURE frmHexEditor.cmdBottomOfFile.Click
		WITH THISFORMSET
		IF .WriteSector()
			nOldLocation = .nPointerLocation
			.nPointerLocation = FSEEK(.nFileToEdit, 0, 2)
			nDesiredLocation = INT(.nPointerLocation / 2048) * 2048
			IF .nPointerLocation = nDesiredLocation	&& file is exact multiple of 2K
				nDesiredLocation = nDesiredLocation - 2048
			ENDIF
			.nPointerLocation = FSEEK(.nFileToEdit, nDesiredLocation, 0)
			IF .nPointerLocation != nOldLocation
				.ReadSector(0)
			ENDIF
		ENDIF
		ENDWITH
	ENDPROC

	PROCEDURE frmHexEditor.cmdBottomOfFile.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		THISFORMSET.CheckKeystroke(nKeyCode)	&& If Ctrl+Up, etc. then scroll grid.
	ENDPROC

	PROCEDURE frmHexEditor.cmdClose.Click
		IF !THISFORMSET.WriteSector()
			&& User pressed cancel (to continue editing data).
			RETURN
		ENDIF
		THISFORMSET.Deactivate	&& Restore environment settings.
		THISFORMSET.Hexeditor = .NULL.
		THISFORMSET.FindStr = .NULL.
		THISFORMSET.GotoSect = .NULL.
		RELEASE THISFORMSET
		
	ENDPROC

	PROCEDURE frmHexEditor.cmdClose.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		THISFORMSET.CheckKeystroke(nKeyCode)	&& If Ctrl+Up, etc. then scroll grid.
	ENDPROC

	PROCEDURE frmHexEditor.cmdFile.Click
		PARAMETER cFileToLoad, lCalledFromFormsetInit
		
		#DEFINE SELECT_FILE_LOC		"Select a file to edit:"
		#DEFINE APP_NAME_LOC		"HexEdit"
		#DEFINE READ_ONLY_LOC		"[Read-Only]"
		#DEFINE READ_ONLY_MSG_LOC	"File cannot be locked.  Read-only access."
		#DEFINE ZERO_LENGTH_LOC		"Error:  File has zero length.  Cannot edit."
		#DEFINE FILE_TOO_LARGE_LOC	"Error:  HexEdit cannot edit a file larger than 4 gigabytes."
		
		IF ! THISFORMSET.WriteSector()
			RETURN
		ENDIF
			
		IF TYPE("cFileToLoad") != "C" OR !FILE(cFileToLoad)	&& If param not supplied or is invalid
			cTempFileName = ""
			cTempFileName = GETFILE("*", SELECT_FILE_LOC)
			IF ISBLANK(cTempFileName)
				RETURN
			ENDIF
		ELSE
			cTempFileName = cFileToLoad
		ENDIF
			
		nTempHandle = FOPEN(cTempFileName, 2)		&& Buffered R/W
		IF nTempHandle < 1							&& Could not open exclusively.  
													&& Let's try opening shared:
			nTempHandle = FOPEN(cTempFileName, 0)	&& Buffered Read-only
			IF nTempHandle < 1						&& Couldn't open file shared.
				THISFORMSET.ReportFileError
				RETURN .F.	&& Bail out.  If a file was already open, it is still open.
							&& If called from THISFORM.INIT, allow to open another file.
			ELSE
				&& We were able to open the file read-only (shared).
				=MESSAGEBOX(READ_ONLY_MSG_LOC, 0, APP_NAME_LOC)
				** Disable editing in all columns of the grid.
				THISFORM.grdData.SetAll("ReadOnly", .T.)
			ENDIF
		ELSE
			*  File was opened with read/write access.
			*  If columns aren't already editable, make them so.
			IF THISFORM.grdData.COLUMN2.READONLY = .T.
				THISFORM.grdData.SetAll("ReadOnly", .F.)
				THISFORM.grdData.COLUMNS(1).READONLY = .t.
				THISFORM.grdData.COLUMNS(18).READONLY = .t.
			ENDIF
		ENDIF
		
		
		nFileSize= FSEEK(nTempHandle, 0, 2)
		IF nFileSize = 0 OR nFileSize > 0xFFFFFFFF
			IF nFileSize = 0		&& If zero-length file, tell user, then exit.
				=MESSAGEBOX(ZERO_LENGTH_LOC,0,APP_NAME_LOC)
			ELSE
				=MESSAGEBOX(FILE_TOO_LARGE_LOC,0,APP_NAME_LOC)
			ENDIF		
			=FCLOSE(nTempHandle)
			&& If there was already a file open, it is still open.
			RETURN .F.		&& If called by THISFORM.INIT, the .F. says to try again.
		ENDIF
		
		WITH THISFORMSET
		cFileToEdit = cTempFileName
		IF .nFileToEdit != 0		&& If we already had a file open, close it.
			=FCLOSE(.nFileToEdit)
		ENDIF
		.nFileToEdit = nTempHandle
		
		THISFORM.lblDecFileSize.CAPTION = .Dec2Hex(nFileSize) + "h   (" + ALLTRIM(STR(nFileSize, 20, 0)) + ")"
		.nPointerLocation = FSEEK(.nFileToEdit,0,0)	&& Move pointer to the top.
		
		.lSectorDirty = .F.
		SET MULTI ON
		=CursorSetProp("BUFF", 5)	&& Turn on tablebuffering for Reverting changes.
		ENDWITH
		
		*  Make a copy of the file name without the path attached for use in title bar.
		nLastBackslash = RAT("\", cFileToEdit)
		IF nLastBackslash = 0
			cStrippedFileName = cFileToEdit
		ELSE
			cStrippedFileName = SUBSTR(cFileToEdit,nLastBackslash+1)
		ENDIF
		
		WITH THISFORM
			.lblCurrentFile.CAPTION = IIF(LEN(cFileToEdit) < 63, cFileToEdit, LEFT(cFileToEdit,20) + "..." + RIGHT(cFileToEdit,40))
			.Caption = APP_NAME_LOC + " - " + cStrippedFileName + IIF(THISFORM.grdData.COLUMN2.READONLY = .T., " " + READ_ONLY_LOC, "")
			.cmdGoToAddress.Enabled = .T.
			.cmdFind.Enabled = .T.
		ENDWITH
		THISFORMSET.nFileSize = nFileSize
		
		THISFORMSET.ReadSector(0)		&& Read first sector.
		
	ENDPROC

	PROCEDURE frmHexEditor.cmdFile.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		THISFORMSET.CheckKeystroke(nKeyCode)	&& If Ctrl+Up, etc. then scroll grid.
	ENDPROC

	PROCEDURE frmHexEditor.cmdFind.Click
		WITH THISFORMSET
		IF ! .WriteSector()
			** User chose cancel at "write changes to disk" dialog.
			RETURN
		ENDIF
		
		
		THISFORM.ENABLED = .F.
		.FindStr.cmdFind.Enabled = .F.
		.FindStr.ENABLED = .T.
		SHOW WINDOW (.FindStr.Name) IN WINDOW (Thisform.Name)
		
		ENDWITH
	ENDPROC

	PROCEDURE frmHexEditor.cmdFind.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		THISFORMSET.CheckKeystroke(nKeyCode)	&& If Ctrl+Up, etc. then scroll grid.
	ENDPROC

	PROCEDURE frmHexEditor.cmdFindNext.Click
		WITH THISFORMSET
		IF ! .WriteSector()
			** User chose cancel at "write changes to disk" dialog.
			RETURN
		ENDIF
		** Search Forwards, from current location
		.FindString(.cSearchString, 1, 2, .lCaseSen)
		
		ENDWITH
	ENDPROC

	PROCEDURE frmHexEditor.cmdFindNext.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		THISFORMSET.CheckKeystroke(nKeyCode)	&& If Ctrl+Up, etc. then scroll grid.
	ENDPROC

	PROCEDURE frmHexEditor.cmdFindPrevious.Click
		WITH THISFORMSET
		IF ! .WriteSector()
			** User chose cancel at "write changes to disk" dialog.
			RETURN
		ENDIF
		
		** Search Backwards, from current location
		.FindString(.cSearchString, 2, 2, .lCaseSen)	
		
		ENDWITH
	ENDPROC

	PROCEDURE frmHexEditor.cmdFindPrevious.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		THISFORMSET.CheckKeystroke(nKeyCode)	&& If Ctrl+Up, etc. then scroll grid.
	ENDPROC

	PROCEDURE frmHexEditor.cmdGoToAddress.Click
		WITH THISFORMSET
		IF ! .WriteSector()
			** User chose cancel at "write changes to disk" dialog.
			RETURN
		ENDIF
		
		.cHexAddress = ""
		.cDecimalAddress = ""
		
		
		THISFORM.Enabled = .F.
		.GotoSect.Enabled = .T.
		.GotoSect.Refresh
		SHOW WINDOW (.GotoSect.Name) IN WINDOW (THISFORM.Name)
		
		ENDWITH
	ENDPROC

	PROCEDURE frmHexEditor.cmdGoToAddress.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		THISFORMSET.CheckKeystroke(nKeyCode)	&& If Ctrl+Up, etc. then scroll grid.
	ENDPROC

	PROCEDURE frmHexEditor.cmdNextSector.Click
		IF THISFORMSET.WriteSector()
			THISFORMSET.ReadSector(1)
		ENDIF
		
		
	ENDPROC

	PROCEDURE frmHexEditor.cmdNextSector.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		THISFORMSET.CheckKeystroke(nKeyCode)	&& If Ctrl+Up, etc. then scroll grid.
	ENDPROC

	PROCEDURE frmHexEditor.cmdPreviousSector.Click
		IF THISFORMSET.WriteSector()
			THISFORMSET.ReadSector(-1)
		ENDIF
		
		
	ENDPROC

	PROCEDURE frmHexEditor.cmdPreviousSector.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		THISFORMSET.CheckKeystroke(nKeyCode)	&& If Ctrl+Up, etc. then scroll grid.
	ENDPROC

	PROCEDURE frmHexEditor.cmdRevertEdits.Click
		=TableRevert(.T., "Hexedit")
		THISFORMSET.lSectorDirty = .F.
		THIS.Enabled = .F.
		THISFORM.cmdSaveEdits.ENABLED = .F.
		
	ENDPROC

	PROCEDURE frmHexEditor.cmdRevertEdits.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		THISFORMSET.CheckKeystroke(nKeyCode)	&& If Ctrl+Up, etc. then scroll grid.
	ENDPROC

	PROCEDURE frmHexEditor.cmdSaveEdits.Click
		THISFORMSET.WriteSector(.T.)
		
	ENDPROC

	PROCEDURE frmHexEditor.cmdSaveEdits.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		THISFORMSET.CheckKeystroke(nKeyCode)	&& If Ctrl+Up, etc. then scroll grid.
	ENDPROC

	PROCEDURE frmHexEditor.cmdTopOfFile.Click
		WITH THISFORMSET
		IF .WriteSector()
			IF .nPointerLocation != 0
				.nPointerLocation = FSEEK(.nFileToEdit, 0, 0)
				.ReadSector(0)
			ENDIF
		ENDIF
		ENDWITH
	ENDPROC

	PROCEDURE frmHexEditor.cmdTopOfFile.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		THISFORMSET.CheckKeystroke(nKeyCode)	&& If Ctrl+Up, etc. then scroll grid.
	ENDPROC

	PROCEDURE frmHexEditor.grdData.BeforeRowColChange
		LPARAMETERS nColIndex
		THISFORMSET.nColNum = nColIndex		&& Store which column focus is moving from.
		
	ENDPROC

	PROCEDURE frmHexEditor.Init
		THISFORMSET.HexEditor = THIS
		THIS.Name = SYS(2015)
		
	ENDPROC

	PROCEDURE frmHexEditor.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		DO CASE
		CASE nKeyCode = 27 AND nShiftAltCtrl = 0	&& escape
			NODEFAULT
			THISFORM.cmdClose.Click
		CASE nKeyCode = 6 AND nShiftAltCtrl = 2		&& CTRL+F
			NODEFAULT
			THISFORM.cmdFind.Click
		ENDCASE
		
	ENDPROC

	PROCEDURE frmHexEditor.QueryUnload
		** This event occurs before the form is released.  Issuing NODEFAULT will
		** prevent the form from being released.
		IF !THISFORMSET.WriteSector()	&& If changes have been made and user presses Cancel at dialog
			NODEFAULT					&& Don't release form.
			RETURN
		ENDIF
		
		THISFORMSET.Deactivate	&& Restore environment settings.
		
		RELEASE THISFORMSET
		
	ENDPROC

	PROCEDURE frmHexEditor.Unload
		THISFORMSET.Hexeditor = .NULL.
		THISFORMSET.FindStr = .NULL.
		THISFORMSET.GotoSect = .NULL.
		
	ENDPROC

ENDDEFINE
